Index: templates/app/sidebar.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><nav class=\"mt-2 nav-compact text-sm\">\r\n        <ul class=\"nav nav-pills nav-sidebar flex-column\" data-widget=\"treeview\" role=\"menu\" data-accordion=\"false\">\r\n          <!-- Add icons to the links using the .nav-icon class\r\n               with font-awesome or any other icon font library -->\r\n             <li class=\"nav-item has-treeview {% if request.resolver_match.url_name == 'home' %} menu-open {% endif %}\">\r\n            <a href=\"#\" class=\"nav-link {% if request.resolver_match.url_name == 'home' %} active {% endif %} \">\r\n              <i class=\"nav-icon fas fa-tachometer-alt\"></i>\r\n              <p>\r\n                Dashboard\r\n                <i class=\"right fas fa-angle-left\"></i>\r\n              </p>\r\n            </a>\r\n            <ul class=\"nav nav-treeview\">\r\n              <li class=\"nav-item\">\r\n                <a href=\"{% url 'home' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'home' %} active {% endif %}\">\r\n                  <i class=\"fas fa-flag nav-icon\"></i>\r\n                  <p>Reports</p>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n             </li>\r\n\r\n    {% if \"app.can_register_batch\" in perms or \"app.can_receive_file\" in perms  %}\r\n        <li class=\"nav-item has-treeview  {% if request.resolver_match.url_name == 'batch_index'  or request.resolver_match.url_name == 'document.create'  or request.resolver_match.url_name == 'batch_create' %} menu-open {% endif %}\" >\r\n            <a href=\"#\" class=\"nav-link  {% if request.resolver_match.url_name == 'batch_index' or request.resolver_match.url_name == 'create_document_file' or request.resolver_match.url_name == 'document.create'  or request.resolver_match.url_name == 'batch_create' %} active {% endif %}\">\r\n              <i class=\"nav-icon fas fa-file-pdf\"></i>\r\n              <p>\r\n                Batches\r\n                <i class=\"right fas fa-angle-left\"></i>\r\n              </p>\r\n            </a>\r\n            <ul class=\"nav nav-treeview\">\r\n\r\n              <li class=\"nav-item\">\r\n                <a href=\"{% url 'batch_index' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'batch_index' %} active {% endif %}\">\r\n                  <i class=\"far fa-folder-open\"></i>\r\n                  <p>Batches</p>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n        </li>\r\n        {% endif %}\r\n\r\n                {% if 'app.can_register_batch' in perms %}\r\n            <li class=\"nav-item has-treeview {% if request.resolver_match.url_name == 'create_document_type'  or request.resolver_match.url_name == 'list_document_types' %} menu-open {% endif %}\">\r\n            <a href=\"#\" class=\"nav-link {% if request.resolver_match.url_name == 'create_document_type'  or request.resolver_match.url_name == 'list_document_types' %} active {% endif %}\">\r\n              <i class=\"nav-icon fas fa-tachometer-alt\"></i>\r\n              <p>\r\n                Document Types\r\n                <i class=\"right fas fa-angle-left\"></i>\r\n              </p>\r\n            </a>\r\n            <ul class=\"nav nav-treeview\">\r\n                {% if 'app.can_register_batch' in perms %}\r\n              <li class=\"nav-item\">\r\n                <a href=\"{% url 'create_document_type' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'create_document_type' %} active {% endif %}\">\r\n                  <i class=\"fas fa-plus-circle nav-icon\"></i>\r\n                  <p>Add Document Type</p>\r\n                </a>\r\n              </li><li class=\"nav-item\">\r\n                <a href=\"{% url 'list_document_types' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'list_document_types' %} active {% endif %} \">\r\n                  <i class=\"fas fa-plus-circle nav-icon\"></i>\r\n                  <p>Document Types</p>\r\n                </a>\r\n              </li>\r\n{% endif %}\r\n\r\n\r\n        </ul>\r\n                </li>\r\n        {% endif %}\r\n            {% if 'app.can_register_batch' in perms %}\r\n            <li class=\"nav-item has-treeview  {% if request.resolver_match.url_name == 'list_file_types'  or request.resolver_match.url_name == 'create_file_type' %} menu-open {% endif %}\" >\r\n            <a href=\"#\" class=\"nav-link {% if request.resolver_match.url_name == 'list_file_types'  or request.resolver_match.url_name == 'create_file_type' %} active {% endif %}\">\r\n              <i class=\"nav-icon fas fa-file-word\"></i>\r\n              <p>\r\n                File Types\r\n                <i class=\"right fas fa-angle-left\"></i>\r\n              </p>\r\n            </a>\r\n            <ul class=\"nav nav-treeview\">\r\n                {% if 'app.can_register_batch' in perms %}\r\n              <li class=\"nav-item\">\r\n                <a href=\"{% url 'create_file_type' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'create_file_type' %} active {% endif %}\">\r\n                  <i class=\"far fa-circle nav-icon\"></i>\r\n                  <p>Add File Type</p>\r\n                </a>\r\n              </li>\r\n\r\n            {% endif %}\r\n            {% if 'app.can_register_batch' in perms %}\r\n                 <li class=\"nav-item\">\r\n                <a href=\"{% url 'list_file_types' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'list_file_types' %} active {% endif %}\">\r\n                  <i class=\"far fa-circle nav-icon\"></i>\r\n                  <p>View Files Types</p>\r\n                </a>\r\n              </li>\r\n                {% endif %}\r\n            </ul>\r\n          </li>\r\n        {% endif %}\r\n        {% if 'app.can_receive_file' in perms or 'app.can_disassemble_file' in perms or 'app.can_scan_file' in perms or 'app.can_reassemble_file' in perms or 'app.can_transcribe_file' in perms  or 'app.can_qa_file' in perms or 'app.can_validate_file' in perms %}\r\n                  <li class=\"nav-item has-treeview {% if request.resolver_match.url_name == 'list_document_files' %} menu-open {% endif %}\">\r\n            <a href=\"#\" class=\"nav-link {% if request.resolver_match.url_name == 'list_document_files' %} active {% endif %} \">\r\n              <i class=\"nav-icon fas fa-folder-open\"></i>\r\n              <p>\r\n                Files\r\n                <i class=\"right fas fa-angle-left\"></i>\r\n              </p>\r\n            </a>\r\n            <ul class=\"nav nav-treeview\">\r\n                {% if 'app.can_receive_file' in perms or 'app.can_disassemble_file' in perms or 'app.can_scan_file' in perms or 'app.can_reassemble_file' in perms or 'app.can_transcribe_file' in perms  or 'app.can_qa_file' in perms or 'app.can_validate_file' in perms %}\r\n                 <li class=\"nav-item\">\r\n                <a href=\"{% url 'list_document_files' %}\" class=\"nav-link  {% if request.resolver_match.url_name == 'list_document_files' %} active {% endif %} \">\r\n                  <i class=\"far fa-circle nav-icon\"></i>\r\n                  <p>View Files</p>\r\n                </a>\r\n              </li>\r\n\r\n{% endif %}\r\n\r\n            </ul>\r\n{% endif %}\r\n                {% if 'app.can_scan_file' in perms or 'app.can_transcribe_file' in perms  or 'app.can_qa_file' in perms or 'app.can_validate_file' in perms %}\r\n            <li class=\"nav-item has-treeview {% if request.resolver_match.url_name == 'create_document_type' or request.resolver_match.url_name == 'get_file_to_upload_documents' or request.resolver_match.url_name  == 'list_transcribe_files'%} menu-open {% endif %}\">\r\n            <a href=\"#\" class=\"nav-link {% if request.resolver_match.url_name == 'create_document_type'  or request.resolver_match.url_name == 'get_file_to_upload_documents' or request.resolver_match.url_name  == 'list_transcribe_files' %} active {% endif %}\">\r\n              <i class=\"nav-icon fas fa-tachometer-alt\"></i>\r\n              <p>\r\n                Documents\r\n                <i class=\"right fas fa-angle-left\"></i>\r\n              </p>\r\n            </a>\r\n            <ul class=\"nav nav-treeview\">\r\n\r\n            {% if 'app.can_scan_file' in perms %}\r\n                 <li class=\"nav-item\">\r\n                <a href=\"{% url 'get_file_to_upload_documents' %}\" class=\"nav-link\">\r\n                  <i class=\"fas fa-file-upload nav-icon\"></i>\r\n                  <p>Upload Documents</p>\r\n                </a>\r\n              </li>\r\n                {% endif %}\r\n            {% if  'app.can_transcribe_file' in perms  %}\r\n                  <li class=\"nav-item\">\r\n                <a href=\"{% url 'list_transcribe_files' %}\" class=\"nav-link\">\r\n                  <i class=\"fas fa-glasses nav-icon\"></i>\r\n                  <p>Transcribe Documents</p>\r\n                </a>\r\n              </li>\r\n{% endif %}\r\n        </ul>\r\n                </li>\r\n        {% endif %}\r\n        {% if 'app.can_qa_file' in perms or 'app.can_validate_file' in perms or \"app.can_receive_file\" in perms or 'app.can_disassemble_file' in perms or 'app.can_reassemble_file' in perms %}\r\n             <li class=\"nav-item has-treeview {% if request.resolver_match.url_name == 'quality' or request.resolver_match.url_name == 'inspect' or request.resolver_match.url_name == 'receive' or request.resolver_match.url_name == 'validation'  %} menu-open {% endif %}\">\r\n            <a href=\"#\" class=\"nav-link {% if request.resolver_match.url_name == 'quality' or request.resolver_match.url_name == 'inspect' or request.resolver_match.url_name == 'receive' or request.resolver_match.url_name == 'validation' %} active {% endif %}\">\r\n              <i class=\"nav-icon fas fa-microscope\"></i>\r\n              <p>\r\n                Quality Control\r\n                <i class=\"right fas fa-angle-left\"></i>\r\n              </p>\r\n            </a>\r\n            <ul class=\"nav nav-treeview\">\r\n{% if 'app.can_qa_file' in perms %}\r\n                 <li class=\"nav-item\">\r\n                <a href=\"{% url 'quality' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'quality' %} active {% endif %}\">\r\n                  <i class=\"fas fa-gavel nav-icon\"></i>\r\n                  <p>QA</p>\r\n                </a>\r\n              </li>\r\n\r\n    {% endif %}\r\n            {% if 'app.can_disassemble_file' in perms or 'app.can_reassassemble_file' %}\r\n                      <li class=\"nav-item\">\r\n                <a href=\"{% url 'inspect' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'inspect' %} active {% endif %}\">\r\n                  <i class=\"fas fa-gavel nav-icon\"></i>\r\n                  <p>{% if user.is_superuser %}\r\n                      Assembler\r\n                      {% elif 'app.can_disassemble_file' in perms %}\r\n                      Disassembler\r\n                  {% else %}\r\n                      Reassembler\r\n                      {% endif %}</p>\r\n                </a>\r\n    </li>\r\n\r\n                {% endif %}\r\n            {% if 'app.can_receive_file' in perms %}\r\n\r\n                <li class=\"nav-item\">\r\n                <a href=\"{% url 'receive' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'receive' %} active {% endif %}\">\r\n                  <i class=\"fas fa-gavel nav-icon\"></i>\r\n                  <p>Reception</p>\r\n                </a>\r\n              </li>\r\n                {% endif %}\r\n    {% if 'app.can_validate_file' in perms %}\r\n                  <li class=\"nav-item\">\r\n                <a href=\"{% url 'validation' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'validation' %} active {% endif %}\">\r\n                  <i class=\"fas fa-check-double nav-icon\"></i>\r\n                  <p>Validate Documents</p>\r\n                </a>\r\n              </li>\r\n{% endif %}\r\n            </ul>\r\n            </li>\r\n{% endif %}\r\n            {% if perms.auth %}\r\n            <li class=\"nav-item has-treeview {% if request.resolver_match.url_name == 'users.index' or request.resolver_match.url_name == 'users.create' or request.resolver_match.url_name == 'groups.index' or request.resolver_match.url_name == 'roles.create'  %} menu-open {% endif %}\">\r\n            <a href=\"#\" class=\"nav-link {% if request.resolver_match.url_name == 'users.index' or request.resolver_match.url_name == 'users.create' or request.resolver_match.url_name == 'groups.index' or request.resolver_match.url_name == 'roles.create'  %} active {% endif %} \">\r\n              <i class=\"nav-icon fas fa-users\"></i>\r\n              <p>\r\n                User Management\r\n                <i class=\"right fas fa-angle-left\"></i>\r\n              </p>\r\n            </a>\r\n\r\n\r\n            <ul class=\"nav nav-treeview\">\r\n            {% if perms.auth.view_user %}\r\n                 <li class=\"nav-item\">\r\n                <a href=\"{% url 'users.index' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'users.index' %} active {% endif %}\">\r\n                  <i class=\"fas fa-user nav-icon\"></i>\r\n                  <p>Users</p>\r\n                </a>\r\n              </li>\r\n            {% endif %}\r\n            {% if perms.auth.add_user %}\r\n                 <li class=\"nav-item\">\r\n                <a href=\"{% url 'users.create' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'users.create' %} active {% endif %} \">\r\n                  <i class=\"fas fa-plus-circle nav-icon\"></i>\r\n                  <p>Add user</p>\r\n                </a>\r\n              </li>\r\n            {% endif %}\r\n                {% if perms.auth.view_group %}\r\n                  <li class=\"nav-item\">\r\n                <a href=\"{% url 'groups.index' %}\" class=\"nav-link  {% if request.resolver_match.url_name == 'groups.index' %} active {% endif %} \">\r\n                  <i class=\"fas fa-check-double nav-icon\"></i>\r\n                  <p>Roles</p>\r\n                </a>\r\n              </li>\r\n                    {% endif %}\r\n             {% if perms.auth.add_user %}\r\n                 <li class=\"nav-item\">\r\n                <a href=\"{% url 'roles.create' %}\" class=\"nav-link {% if request.resolver_match.url_name == 'roles.create' %} active {% endif %}\">\r\n                  <i class=\"fas fa-plus-circle nav-icon\"></i>\r\n                  <p>Add Role</p>\r\n                </a>\r\n              </li>\r\n            {% endif %}\r\n            </ul>\r\n\r\n            </li>\r\n\r\n            {% endif %}\r\n\r\n\r\n\r\n        </ul>\r\n\r\n      </nav>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/app/sidebar.html	(revision a5c534ddacd4f742152ecaa98ccd6191508ff43d)
+++ templates/app/sidebar.html	(date 1589963664465)
@@ -17,6 +17,12 @@
                   <p>Reports</p>
                 </a>
               </li>
+             <li class="nav-item">
+                <a href="{% url 'logged_in_user_history' %}" class="nav-link {% if request.resolver_match.url_name == 'home' %} active {% endif %}">
+                  <i class="fas fa-chart-pie nav-icon"></i>
+                  <p>Analytics</p>
+                </a>
+              </li>
             </ul>
              </li>
 
Index: app/view/file_history.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.views.decorators.csrf import csrf_exempt\r\nfrom rest_framework import viewsets\r\nfrom app.serializers import DocumentSerializer\r\nfrom django.contrib.auth.models import User\r\nfrom app.models import DocumentFile, Modification\r\n\r\ndef get_file_history(request, pk):\r\n    file=DocumentFile.objects.get(pk=pk)\r\n    if file:\r\n        all_modification=file.modification_set.all()\r\n        return all_modification\r\n    else:\r\n        return Modification.objects.none()#\r\n\r\ndef get_each_user_history(request, pk):\r\n    user=User.objects.get(pk=pk)\r\n    if user:\r\n       return user.modification_set.all()\r\n    else:\r\n        return Modification.objects.none()\r\n\r\ndef get_loggedin_user_history(request):\r\n    user=request.user\r\n    if user:\r\n       return user.modification_set.all()\r\n    else:\r\n        return Modification.objects.none()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/view/file_history.py	(revision a5c534ddacd4f742152ecaa98ccd6191508ff43d)
+++ app/view/file_history.py	(date 1589920495788)
@@ -3,6 +3,7 @@
 from app.serializers import DocumentSerializer
 from django.contrib.auth.models import User
 from app.models import DocumentFile, Modification
+from django.shortcuts import render
 
 def get_file_history(request, pk):
     file=DocumentFile.objects.get(pk=pk)
@@ -22,6 +23,7 @@
 def get_loggedin_user_history(request):
     user=request.user
     if user:
-       return user.modification_set.all()
+        data =  user.modification_set.all()
     else:
-        return Modification.objects.none()
+        data= Modification.objects.none()
+    return render(request, 'user/history.html', {'data':data})
Index: app/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nfrom datetime import datetime\r\nfrom enum import Enum\r\nfrom django.contrib.contenttypes.models import ContentType\r\nfrom django.db import models\r\nfrom django.contrib.postgres.fields import JSONField\r\nfrom django.utils import timezone\r\nfrom django_fsm import FSMField, transition\r\nfrom django.contrib.auth.models import User, Permission\r\nfrom PIL import Image\r\nfrom django.urls import reverse\r\n\r\nSTAGES = (\"Registry\", \"Reception\", \"Assembly\", \"Scanner\", \"Transcriber\", \"Quality Assuarance\", \"Validator\")\r\nSTATES = (\"Opened\", \"In Progress\",\"Done\", \"Closed\",)\r\nBATCH = (\"Opened\",\"Done\",\"Closed\")\r\n\r\n\r\nclass Batch(models.Model):\r\n    batch_no = models.CharField(max_length=255, null=False, unique=True)\r\n    description = models.TextField(null=True, blank=True)\r\n    created_on = models.DateTimeField(auto_now_add=timezone.now)\r\n    created_by = models.ForeignKey(User, on_delete=models.DO_NOTHING, null=True, blank=True,\r\n                                   related_name='created_by')\r\n    is_return_batch = models.BooleanField(null=False)\r\n    state = FSMField(default=BATCH[0], protected=True)\r\n\r\n    # transition methods\r\n    @transition(field=state, source=[BATCH[2]], target=BATCH[0])\r\n    def open(self, user=None):\r\n\r\n        \"\"\"opening a closed file\"\"\"\r\n\r\n        pass\r\n\r\n    @transition(field=state, source=[BATCH[0]], target=BATCH[1])\r\n    def done(self):\r\n\r\n        \"\"\"\"staging a batch once done adding files and docs\r\n         -moves state of files in batch to DONE\r\n        -moves batch state to DONE\r\n         \"\"\"\r\n\r\n        files = DocumentFile.objects.filter(batch=self)\r\n        for file in files:\r\n            file.done()\r\n            file.save()\r\n\r\n    @transition(field=state, source=[BATCH[1]], target=BATCH[0])\r\n    def continue_editing(self):\r\n        \"\"\"\"unstaging a staged batch to add/edit/delete some files and docs\r\n                 -moves state of files in batch to Open\r\n                -moves batch state to Open\r\n                 \"\"\"\r\n        files = DocumentFile.objects.filter(batch=self)\r\n        for file in files:\r\n            file.continue_editing()\r\n            file.save()\r\n        pass\r\n\r\n    @transition(field=state, source=[BATCH[1]], target=BATCH[2])\r\n    def close(self, user=None, comment=''):\r\n\r\n        \"\"\"\"closes a batch\r\n                 -moves state of files in batch to CLOSE\r\n                -moves batch state to CLOSE\r\n                -moves stage files in batch to RECEPTION\r\n\r\n                this action is permanent\r\n                 \"\"\"\r\n        files = DocumentFile.objects.filter(batch=self)\r\n        if not self.is_return_batch:\r\n            for file in files:\r\n                file.close()\r\n                file.start(user=user)\r\n                file.save()\r\n        else:\r\n            for file in files:\r\n                file.close()\r\n                file.return_registry(user=user, rejection_comment=comment)\r\n                file.save()\r\n\r\n    def get_transition_options(self):\r\n        transition = list(self.get_available_state_transitions())\r\n        # \"Opened\", \"Done\", \"Closed\"\r\n        # 'Open', 'Done', 'Continue_Editing', 'Close'\r\n        if transition[0].target == \"Opened\":\r\n            return \"Open\"\r\n        elif transition[0].target == \"Done\":\r\n            return \"Done\"\r\n        else:\r\n            return \"Close\"\r\n\r\n    def __str__(self):\r\n        return self.batch_no\r\n\r\n\r\nclass DocumentFileType(models.Model):\r\n    file_type = models.CharField(max_length=100, null=False, primary_key=True)\r\n    file_description = models.CharField(max_length=255)\r\n\r\n    def __str__(self):\r\n        return self.file_type\r\n\r\n\r\nclass DocumentType(models.Model):\r\n    document_name = models.CharField(max_length=255, primary_key=True)\r\n    document_field_specs = JSONField()\r\n    document_description = models.CharField(max_length=255)\r\n\r\n    def __str__(self):\r\n        return self.document_name\r\n\r\n\r\n#\r\nclass DocumentFile(models.Model):\r\n    file_reference = models.CharField(primary_key=True, max_length=100)\r\n    file_type = models.ForeignKey(DocumentFileType, on_delete=models.CASCADE)\r\n    document = models.FileField(upload_to='documents')\r\n\r\n\r\n    batch = models.ForeignKey(Batch, on_delete=models.CASCADE, null=True, blank=True)\r\n    file_created_by = models.ForeignKey(User, null=True, blank=True,\r\n                                        on_delete=models.DO_NOTHING,\r\n                                        related_name='file_created_by')\r\n\r\n    created_on = models.DateTimeField(auto_now_add=timezone.now)\r\n    state = FSMField(default=STATES[0], protected=True)\r\n\r\n    file_barcode = models.CharField(unique=True, max_length=255)\r\n    flagged = models.BooleanField(default=False)\r\n\r\n    assigned_to = models.ForeignKey(User, null=True, blank=True,\r\n                                    on_delete=models.DO_NOTHING,\r\n                                    related_name='file_assigned_to')\r\n    # lock = models.BooleanField(default=False)\r\n    file_path = models.CharField(null=True, max_length=100)\r\n    stage = FSMField(default=STAGES[0], protected=True)\r\n\r\n    def __str__(self):\r\n        return self.file_reference\r\n\r\n    def get_absolute_url(self):\r\n        return reverse('view_docs_in_file', kwargs={'file_reference': self.pk})\r\n\r\n    def file_closed(self):\r\n        if self.state == STATES[3]:\r\n            return True\r\n        return False\r\n\r\n    def assigned_to_me(self, user=None):\r\n        if self.assigned_to == user:\r\n            return True\r\n        return False\r\n\r\n    def assign_when_not_assigned(self, user=None):\r\n        if self.assigned_to == user:\r\n            return True\r\n        elif self.assigned_to == None:\r\n            self.assigned_to = user\r\n            self.save()\r\n            return True\r\n\r\n        return False\r\n\r\n    # transition methods\r\n    @transition(field=state, source=[STATES[2]], target=STATES[0])\r\n    def open(self, user=None):\r\n        \"\"\"\"changes  file state to OPEN\r\n       if unassigned: assigns to current user\r\n                         \"\"\"\r\n\r\n        if self.assigned_to == None:\r\n            self.assigned_to = user\r\n            self.save()\r\n        pass\r\n\r\n    @transition(field=state, source=[STATES[0]], target=STATES[1], )\r\n    def done(self):\r\n        \"\"\"\"changes  file state to DONE\r\n\r\n                                 \"\"\"\r\n        pass\r\n\r\n    @transition(field=state, source=[STATES[1]], target=STATES[0], )\r\n    def continue_editing(self):\r\n        \"\"\"\"changes  file state to OPEN\r\n\r\n                                 \"\"\"\r\n        pass\r\n\r\n    @transition(field=state, source=STATES[1], target=STATES[2])\r\n    def close(self):\r\n        \"\"\"\"changes  file state to OPEN\r\n               -changes assigned to null\r\n                                 \"\"\"\r\n        self.assigned_to = None\r\n        self.save()\r\n        pass\r\n\r\n    @transition(field=stage, source=STAGES[0], target=STAGES[1])\r\n    def dispatch_reception(self, user=None):\r\n        \"\"\"\"changes  file stage to RECEPTION\r\n\r\n            -records this action in Modification Table\r\n                                 \"\"\"\r\n        # create log\r\n        Modification.objects.create(\r\n            file=self,\r\n            modified_from_stage=STAGES[0],\r\n            modified_to_stage=STAGES[0],\r\n            by=user\r\n        )\r\n\r\n        self.flagged=False\r\n        self.save()\r\n\r\n    @transition(field=stage, source=[STAGES[1]], target=STAGES[0],conditions=[file_closed],permission=['app.can_receive_file'])\r\n    def return_registry(self,user,rejection_comment=''):\r\n\r\n\r\n        \"\"\"\"flags a  file stage to REGISTRY\r\n\r\n                    -records this action in Modification Table\r\n                    -notify user who created\r\n                    -notify all admins\r\n                                         \"\"\"\r\n        Modification.objects.create(\r\n            file=self,\r\n            modified_from_stage=STAGES[1],\r\n            modified_to_stage=STAGES[0],\r\n            by=user\r\n        )\r\n\r\n        notification = Notification.objects.create(\r\n            file=self,\r\n            comment=rejection_comment\r\n        )\r\n        # user who created\r\n        NotificationSentTo.objects.create(\r\n            notification=notification,\r\n            user=self.file_created_by\r\n        )\r\n\r\n        # all admins\r\n        for user_obj in User.objects.filter(is_superuser=True):\r\n            NotificationSentTo.objects.create(\r\n                notification=notification,\r\n                user=user_obj\r\n            )\r\n\r\n        self.assigned_to = self.file_created_by\r\n        self.flagged = True\r\n        self.save()\r\n\r\n    @transition(field=stage, source=[STAGES[1]], target=STAGES[2], conditions=[file_closed],\r\n                permission=['app.can_receive_file'])\r\n    def dispatch_assembly(self, user=None):\r\n\r\n        \"\"\"\"changes  file stage to ASSEMBLY\r\n\r\n                    -records this action in Modification Table\r\n                                         \"\"\"\r\n        Modification.objects.create(\r\n            file=self,\r\n            modified_from_stage=STAGES[1],\r\n            modified_to_stage=STAGES[2],\r\n            by=user\r\n        )\r\n        self.flagged = False\r\n        self.save()\r\n\r\n    @transition(field=stage, source=[STAGES[2]], target=STAGES[1], conditions=[file_closed],\r\n                permission=['app.can_disassemble_file'])\r\n    def return_reception(self, user=None, rejection_comment=None):\r\n\r\n        \"\"\"\"flags a  file stage to RECEPTION\r\n\r\n                            -records this action in Modification Table\r\n                            -notify user who edited at reception\r\n                            -notify all admins\r\n                                                 \"\"\"\r\n        Modification.objects.create(\r\n            file=self,\r\n            modified_from_stage=STAGES[2],\r\n            modified_to_stage=STAGES[1],\r\n            by=user\r\n        )\r\n\r\n        notification = Notification.objects.create(\r\n            file=self,\r\n            comment=rejection_comment\r\n        )\r\n        # user who did reception\r\n        modified = Modification.objects.filter(modified_to_stage=STAGES[1]).last()\r\n        if modified:\r\n            NotificationSentTo.objects.create(\r\n                notification=notification,\r\n                user=modified.by\r\n            )\r\n\r\n        # all admins\r\n        for user_obj in User.objects.filter(is_superuser=True):\r\n            NotificationSentTo.objects.create(\r\n                notification=notification,\r\n                user=user_obj\r\n            )\r\n        if modified:\r\n            self.assigned_to = modified.by\r\n        else:\r\n            self.assigned_to = None\r\n        self.flagged = True\r\n        self.save()\r\n        pass\r\n\r\n    @transition(field=stage, source=[STAGES[2]], target=STAGES[3], conditions=[file_closed],\r\n                permission=['app.can_disassemble_file'])\r\n    def dispatch_scanner(self, user):\r\n        \"\"\"\"changes  file stage to SCANNER\r\n\r\n                    -records this action in Modification Table\r\n                                         \"\"\"\r\n        Modification.objects.create(\r\n            file=self,\r\n            modified_from_stage=STAGES[2],\r\n            modified_to_stage=STAGES[3],\r\n            by=user\r\n        )\r\n        self.flagged = False\r\n        self.save()\r\n\r\n    @transition(field=stage, source=[STAGES[3]], target=STAGES[4], conditions=[file_closed],\r\n                permission=['app.can_scan_file'])\r\n    def dispatch_transcriber(self, user=None):\r\n\r\n        \"\"\"\"changes  file stage to TRANSCRIBER\r\n\r\n                    -records this action in Modification Table\r\n                                         \"\"\"\r\n        Modification.objects.create(\r\n            file=self,\r\n            modified_from_stage=STAGES[3],\r\n            modified_to_stage=STAGES[4],\r\n            by=user\r\n        )\r\n        self.flagged = False\r\n        self.save()\r\n\r\n    @transition(field=stage, source=[STAGES[4]], target=STAGES[5], conditions=[file_closed],\r\n                permission=['app.can_transcribe_file'])\r\n    def dispatch_qa(self, user=None):\r\n\r\n        \"\"\"\"changes  file stage to QA\r\n\r\n                    -records this action in Modification Table\r\n                                         \"\"\"\r\n        Modification.objects.create(\r\n            file=self,\r\n            modified_from_stage=STAGES[4],\r\n            modified_to_stage=STAGES[5],\r\n            by=user\r\n        )\r\n        self.flagged = False\r\n        self.save()\r\n\r\n    @transition(field=stage, source=[STAGES[5]], target=STAGES[6], conditions=[file_closed],\r\n                permission=['app.can_qa_file'])\r\n    def dispatch_validator(self, user=None):\r\n        \"\"\"\"changes  file stage to VALIDATOR\r\n\r\n                    -records this action in Modification Table\r\n                                         \"\"\"\r\n\r\n        Modification.objects.create(\r\n            file=self,\r\n            modified_from_stage=STAGES[5],\r\n            modified_to_stage=STAGES[6],\r\n            by=user\r\n        )\r\n        self.flagged = False\r\n        self.save()\r\n\r\n    @transition(field=stage, source=[STAGES[6]], target=STAGES[1], conditions=[file_closed],\r\n                permission=['app.can_validate_file'])\r\n    def finalize_to_reception(self):\r\n        self.flagged = False\r\n        self.save()\r\n\r\n\r\nclass DocumentFileDetail(models.Model):\r\n    file_reference = models.ForeignKey(DocumentFile, db_column=\"file_reference\", on_delete=models.CASCADE, null=True)\r\n    document_barcode = models.CharField(unique=True, max_length=255)\r\n\r\n    document_name = models.CharField(max_length=255, blank=True)\r\n    document_type = models.ForeignKey(DocumentType, on_delete=models.CASCADE, null=True)\r\n\r\n    document_content = JSONField(null=True)\r\n    document_file_path = models.CharField(null=True, max_length=100)\r\n    doc_created_by = models.ForeignKey(User, null=True, blank=True,\r\n                                       on_delete=models.DO_NOTHING,\r\n                                       related_name='doc_created_by')\r\n    created_on = models.DateTimeField(auto_now_add=timezone.now)\r\n    # flagged = models.BooleanField(default=False)\r\n\r\n    assigned_to = models.ForeignKey(User, null=True, blank=True,\r\n                                    on_delete=models.DO_NOTHING,\r\n                                    related_name='doc_assigned_to')\r\n\r\n    state = FSMField(default=STATES[0], protected=True)\r\n\r\n    # transition methods\r\n    @transition(field=state, source=[STATES[2]], target=STATES[0])\r\n    def open(self):\r\n        \"\"\"\"changes  document state to Open\r\n\r\n\r\n                                                 \"\"\"\r\n\r\n    @transition(field=state, source=[STATES[0]], target=STATES[1], )\r\n    def done(self):\r\n        \"\"\"\"changes  document state to Done\r\n\r\n\r\n                                                         \"\"\"\r\n\r\n    @transition(field=state, source=[STATES[1]], target=STATES[0], )\r\n    def continue_editing(self):\r\n        \"\"\"\"changes  document state  back to Open\r\n\r\n\r\n                                                         \"\"\"\r\n\r\n    @transition(field=state, source=STATES[1], target=STATES[2])\r\n    def close(self):\r\n        \"\"\"\"changes  document state to Close\r\n\r\n\r\n                                                         \"\"\"\r\n        pass\r\n\r\n    def __str__(self):\r\n        return self.document_barcode\r\n\r\n\r\nclass Profile(models.Model):\r\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\r\n    id_no = models.CharField(null=True, max_length=25)\r\n    phone = models.CharField(null=True, max_length=25)\r\n    full_name = models.CharField(null=True, max_length=25)\r\n    first_login = models.BooleanField(default=True)\r\n    image = models.ImageField(default='default.jpg', upload_to='profile_pics', null=True)\r\n\r\n    def __str__(self):\r\n        return f'{self.user.username} Profile'\r\n\r\n    def save(self, *args, **kwargs):\r\n        super().save()\r\n\r\n        img = Image.open(self.image.path)\r\n\r\n        if img.height > 300 or img.width > 300:\r\n            output_size = (300, 300)\r\n            img.thumbnail(output_size)\r\n            img.save(self.image.path)\r\n\r\n\r\ndef document_directory_path(instance, filename):\r\n    basename = os.path.basename(filename)\r\n    name, ext = os.path.splitext(basename)\r\n    folder = instance.file_reference.file_reference\r\n    batch = instance.file_reference.batch\r\n\r\n    path = 'media/%d/{}/{}/{}{}'.format(batch, folder, name, ext)\r\n    return datetime.now().strftime(path)\r\n\r\n\r\nclass Filer(models.Model):\r\n    \"\"\"\r\n    create an initial folder\r\n    create a new folder if it has more than 2000 files inside it\r\n    \"\"\"\r\n    filepond = models.FileField(upload_to=document_directory_path)\r\n    file_reference = models.ForeignKey(DocumentFile, related_name='documents', on_delete=models.CASCADE)\r\n    document_reference = models.CharField(null=True, max_length=40)\r\n\r\n    def filename(self):\r\n        return os.path.basename(self.filepond.name)\r\n\r\n\r\nclass Modification(models.Model):\r\n    \"\"\" This tables all the modifications of either batch,file or document-will be used to track the action workflow\"\"\"\r\n\r\n    file = models.ForeignKey(DocumentFile, on_delete=models.CASCADE)\r\n    modified_from_stage = FSMField(null=False, protected=True)\r\n    modified_to_stage = FSMField(null=True, protected=True)\r\n    by = models.ForeignKey(User, on_delete=models.CASCADE)\r\n\r\n\r\nclass Notification(models.Model):\r\n    \"\"\"all notifications\"\"\"\r\n\r\n    file = models.ForeignKey(DocumentFile, on_delete=models.CASCADE)\r\n    comment = models.TextField(null=True)\r\n    created_at = models.DateTimeField(auto_now_add=timezone.now)\r\n\r\n\r\nclass NotificationSentTo(models.Model):\r\n    notification = models.ForeignKey(Notification, on_delete=models.CASCADE, null=False)\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE, null=False)\r\n    read_at = models.DateTimeField(null=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/models.py	(revision a5c534ddacd4f742152ecaa98ccd6191508ff43d)
+++ app/models.py	(date 1589907008398)
@@ -132,7 +132,7 @@
     assigned_to = models.ForeignKey(User, null=True, blank=True,
                                     on_delete=models.DO_NOTHING,
                                     related_name='file_assigned_to')
-    # lock = models.BooleanField(default=False)
+    lock = models.BooleanField(default=False)
     file_path = models.CharField(null=True, max_length=100)
     stage = FSMField(default=STAGES[0], protected=True)
 
@@ -399,12 +399,10 @@
                                        on_delete=models.DO_NOTHING,
                                        related_name='doc_created_by')
     created_on = models.DateTimeField(auto_now_add=timezone.now)
-    # flagged = models.BooleanField(default=False)
-
+    flagged = models.BooleanField(default=False)
     assigned_to = models.ForeignKey(User, null=True, blank=True,
                                     on_delete=models.DO_NOTHING,
                                     related_name='doc_assigned_to')
-
     state = FSMField(default=STATES[0], protected=True)
 
     # transition methods
Index: app/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.views import LogoutView, PasswordChangeView\r\nfrom django.urls import path, re_path\r\n\r\n\r\nfrom .views import (\r\n    registry_submit, AdminView, FileTypeDelete,request_file,\r\n    DocumentTranscribe,\r\n    get_document_and_document_type,\r\n    UserListView, UserDetailView, UserUpdateView,\r\n    UserDeleteView, GroupListView, GroupUpdateView, user_create, Login,\r\n     add_group, update_document_content,\r\n    validate_document_content,\r\n    receiver_batch_submit,\r\n    start_scanning,start_qa,start_validate,change_password)\r\nfrom .view.user import reset_default_password\r\nfrom app.view.file import (\r\n                            FilesView, DocumentFileCreate, DocumentFileList,\r\n                            RejectedDocumentFileList,FileDeleteView)\r\nfrom .view.registry import (registry_submit_to_receiver, change_file_status_to_accept, change_file_status_to_accept_ajax,\r\n                            change_file_status_to_reject,change_document_status_to_accept,\r\n                            change_document_status_to_reject, return_rectified_file)\r\nfrom .view.receiver import select_file\r\nfrom app.view.batch import BatchListView, create_batch,BatchDeleteView, BatchFilesView, BatchDocumentsView\r\nfrom app.view.document import DocumentDeleteView, DocumentView, UploadedDocumentsList, create_document\r\nfrom app.view.document_type import DocumentTypeCreate, DocumentTypeList\r\n\r\nfrom app.view.file_type import FileTypeCreate, FileTypeList\r\nfrom app.view.scanner import upload_documents_to_file, ScannerTableView\r\nfrom app.view.transcribe import get_files_from_storage, update_document_file_detail, TranscribeFiles\r\nfrom app.view.user import profile,admin_check_user\r\nfrom .view.report import report\r\nfrom app.view.inspection import  inspect, receive\r\nfrom app.view.qa import  QaFileList\r\nfrom app.view.validate import ValidateFileList\r\n\r\nfrom app.view.states_methods import update_state_batch,update_state_file,update_state_document\r\nfrom app.view.stages_methods import update_stage_file\r\nfrom app.view.file_history import get_file_history,get_each_user_history,get_loggedin_user_history\r\nfrom app.view.escalations import RejectedDocumentFileList\r\n\r\nurlpatterns = [\r\n    path('', report, name='home'),\r\n    #submits\r\n    path('submit/<int:batch_id>', registry_submit, name='submit.registry'),\r\n\r\n    # batches\r\n    path('batches/', BatchListView.as_view(), name='batch_index'),\r\n    path('create_batch/',create_batch,name='batch_create'),\r\n    path('delete_batch/<int:pk>/', BatchDeleteView.as_view(), name='batch_delete'),\r\n    path('view/batch/<int:batch_id>/files/', BatchFilesView.as_view(), name='batch_files' ),\r\n    path('view/batch/<str:file_reference>/documents/', BatchDocumentsView.as_view(), name='batch_documents'),\r\n\r\n    # file type urls\r\n    path('create_file_type/', FileTypeCreate.as_view(), name='create_file_type'),\r\n    path('list_files_types', FileTypeList.as_view(), name='list_file_types'),\r\n    path('delete_file_type/<str:pk>/delete/', FileTypeDelete.as_view(), name='delete_file_type'),\r\n\r\n    # physical file urls\r\n    path('batch/<int:batch_id>/files', FilesView.as_view(), name='files.view'),\r\n    path('batch/<int:batch_id>/create_file/', DocumentFileCreate.as_view(), name='create_document_file'),\r\n    path('list_document_files', DocumentFileList.as_view(), name='list_document_files'),\r\n    path('list/transcribe/files', TranscribeFiles.as_view(), name='list_transcribe_files'),\r\n    path('list_of_escalated_document_files', RejectedDocumentFileList.as_view(), name='rejected_list_document_files'),\r\n    path('delete_file/<pk>/', FileDeleteView.as_view(), name='file_delete'),\r\n\r\n    # Document Types\r\n    path('create_document_type', DocumentTypeCreate.as_view(), name='create_document_type'),\r\n    path('view_document_types', DocumentTypeList.as_view(), name='list_document_types'),\r\n\r\n    # document upload and viewing\r\n    path('file/<file_ref_no>/documents', DocumentView.as_view(), name='document.view'),\r\n    path('file/<file_ref_no>/create_document/', create_document, name='document.create'),\r\n    path('uploaded_documents', UploadedDocumentsList.as_view(), name='uploaded_documents'),\r\n    path('files/upload/select',ScannerTableView.as_view(), name='get_file_to_upload_documents'),\r\n    path('upload/to/file/<str:file_reference>',upload_documents_to_file, name='upload_document'),\r\n    path('delete_document/<pk>/', DocumentDeleteView.as_view(), name='document_delete'),\r\n\r\n\r\n    # transcribe urls\r\n    path('view_docs_in_file/<str:file_reference>', DocumentTranscribe.as_view(), name='view_docs_in_file'),\r\n    path('transcription_lab/<int:doc_id>/<str:file_type>',get_document_and_document_type, name='transcription_lab'),\r\n    path('update_doc_content/<int:doc_id>', update_document_content, name='update_doc_content' ),\r\n    path('validate_doc_content/<int:doc_id>', validate_document_content, name='validate_doc_content'),\r\n\r\n    path('file/document/storage/<str:file_reference>', get_files_from_storage, name='get_files_from_storage'),\r\n    path('update/document/<int:document>',update_document_file_detail, name='update_document_file_detail'),\r\n\r\n    # Auth\r\n    path('users/', UserListView.as_view(), name='users.index'),\r\n    path('users/', UserListView.as_view(), name='users.index'),\r\n    path('users/create/', user_create, name='users.create'),\r\n    path('users/<int:pk>/', UserDetailView.as_view(), name='users.detail'),\r\n    path('users/update/<int:pk>/', UserUpdateView.as_view(), name='user.update'),\r\n    path('change_password/<username>', change_password, name='user.changepass'),\r\n\r\n    path('user/delete/<int:pk>/', UserDeleteView.as_view(), name='user.delete'),\r\n    # groups\r\n    path('roles/', GroupListView.as_view(), name='groups.index'),\r\n    path('roles/create/', add_group, name='roles.create'),\r\n    path('roles/update/<int:pk>/', GroupUpdateView.as_view(), name='groups.update'),\r\n    #\r\n\r\n    path('login/', Login.as_view(), name='login'),\r\n\r\n    path('logout/', LogoutView.as_view(), name='logout'),\r\n\r\n    path('accept_file/<pk>/', change_file_status_to_accept, name='change_file_status_to_accept'),\r\n    re_path(r'^accept_file/ajax/(?P<pk>\\w+)/$', change_file_status_to_accept_ajax, name='change_file_status_to_accept_ajax'),\r\n    path('reject_file/<pk>/', change_file_status_to_reject, name='change_file_status_to_reject'),\r\n    path('accept_document/<pk>/', change_document_status_to_accept, name='change_document_status_to_accept'),\r\n    path('reject_document/<pk>/', change_document_status_to_reject, name='change_document_status_to_reject'),\r\n    path('return_rectified_file/<pk>/', return_rectified_file, name='return_rectified_file'),\r\n\r\n    path('registry_submit_batch/<int:batch_id>/', registry_submit_to_receiver, name='registry_submit_batch'),\r\n    path('receiver_submit_batch/<int:batch_id>/', receiver_batch_submit, name='receiver_submit_batch'),\r\n\r\n    path('select_file/<pk>/', select_file, name='select_file'),\r\n    path('scan/<file_ref>/', start_scanning, name='start_scan'),\r\n    path('qa/<file_ref>/', start_qa, name='start_qa'),\r\n    path('validate/<file_ref>/', start_validate, name='start_validate'),\r\n\r\n    path('request_file', request_file, name='request_file'),\r\n\r\n    path('profile/', profile, name='profile'),\r\n    path('reset_default_password', reset_default_password, name='reset_default_password'),\r\n    path('check_user<int:pk>', admin_check_user, name='admin_check_user'),\r\n    # api endpoints\r\n    # path('api/v1/',ApiViewSet.as_view(), name='api'),\r\n\r\n    # run file and document inspection\r\n    re_path(r'^inspect/file/$', inspect, name='inspect'),\r\n    re_path(r'^inspect/file/(?P<id>\\w+)/$', inspect, name='inspect'),\r\n    re_path(r'^receive/batch/$', receive, name='receive'),\r\n    re_path(r'^receive/batch/(?P<id>\\w+)/$', receive, name='receive'),\r\n\r\n    #quality assuarance link\r\n    path('quality/files/', QaFileList.as_view(), name='quality'),\r\n    path('validate/document/files', ValidateFileList.as_view(), name='validation'),\r\n\r\n\r\n    #\r\n    #stage and states urls\r\n    #\r\n    path('update_batch_state/<pk>/<action>/', update_state_batch,name='update_state_batch'),\r\n    path('update_file_state/<pk>/<action>/', update_state_file,name='update_state_file'),\r\n    path('update_document_state/<pk>/<action>/', update_state_document,name='update_document_batch'),\r\n\r\n    #stage url\r\n\r\n    path('update_file_stage/<pk>/<action>/', update_stage_file,name='update_stage_file'),\r\n\r\n    #get file history\r\n\r\n    path('file_history/<pk>/',get_file_history,name='file_history'),\r\n\r\n    #get logged user history\r\n    path('my_history',get_loggedin_user_history,name='logged_in_user_history'),\r\n\r\n#get  user history\r\n    path('user/<pk>',get_each_user_history,name='get_user_history'),\r\n\r\n#get escalated files\r\n    path('my_escalated files',RejectedDocumentFileList.as_view(), name='my_escalated_files')\r\n\r\n\r\n\r\n]\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/urls.py	(revision a5c534ddacd4f742152ecaa98ccd6191508ff43d)
+++ app/urls.py	(date 1589908943575)
@@ -160,9 +160,7 @@
     path('user/<pk>',get_each_user_history,name='get_user_history'),
 
 #get escalated files
-    path('my_escalated files',RejectedDocumentFileList.as_view(), name='my_escalated_files')
-
-
+    path('my_escalated files',RejectedDocumentFileList.as_view(), name='my_escalated_files'),
 
 ]
 
Index: app/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/migrations/0001_initial.py	(revision a5c534ddacd4f742152ecaa98ccd6191508ff43d)
+++ app/migrations/0001_initial.py	(revision a5c534ddacd4f742152ecaa98ccd6191508ff43d)
@@ -1,135 +0,0 @@
-# Generated by Django 2.2 on 2020-05-19 13:15
-
-import app.models
-from django.conf import settings
-import django.contrib.postgres.fields.jsonb
-from django.db import migrations, models
-import django.db.models.deletion
-import django_fsm
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Batch',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('batch_no', models.CharField(max_length=255, unique=True)),
-                ('description', models.TextField(blank=True, null=True)),
-                ('created_on', models.DateTimeField(auto_now_add=True)),
-                ('is_return_batch', models.BooleanField()),
-                ('state', django_fsm.FSMField(default='Opened', max_length=50, protected=True)),
-                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='created_by', to=settings.AUTH_USER_MODEL)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='DocumentFile',
-            fields=[
-                ('file_reference', models.CharField(max_length=100, primary_key=True, serialize=False)),
-                ('document', models.FileField(upload_to='documents')),
-                ('created_on', models.DateTimeField(auto_now_add=True)),
-                ('state', django_fsm.FSMField(default='Opened', max_length=50, protected=True)),
-                ('file_barcode', models.CharField(max_length=255, unique=True)),
-                ('flagged', models.BooleanField(default=False)),
-                ('lock', models.BooleanField(default=False)),
-                ('file_path', models.CharField(max_length=100, null=True)),
-                ('stage', django_fsm.FSMField(default='Registry', max_length=50, protected=True)),
-                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='file_assigned_to', to=settings.AUTH_USER_MODEL)),
-                ('batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Batch')),
-                ('file_created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='file_created_by', to=settings.AUTH_USER_MODEL)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='DocumentFileType',
-            fields=[
-                ('file_type', models.CharField(max_length=100, primary_key=True, serialize=False)),
-                ('file_description', models.CharField(max_length=255)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='DocumentType',
-            fields=[
-                ('document_name', models.CharField(max_length=255, primary_key=True, serialize=False)),
-                ('document_field_specs', django.contrib.postgres.fields.jsonb.JSONField()),
-                ('document_description', models.CharField(max_length=255)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Notification',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('comment', models.TextField(null=True)),
-                ('created_at', models.DateTimeField(auto_now_add=True)),
-                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.DocumentFile')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Profile',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('id_no', models.CharField(max_length=25, null=True)),
-                ('phone', models.CharField(max_length=25, null=True)),
-                ('full_name', models.CharField(max_length=25, null=True)),
-                ('first_login', models.BooleanField(default=True)),
-                ('image', models.ImageField(default='default.jpg', null=True, upload_to='profile_pics')),
-                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='NotificationSentTo',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('read_at', models.DateTimeField(null=True)),
-                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Notification')),
-                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Modification',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('modified_from_stage', django_fsm.FSMField(max_length=50, protected=True)),
-                ('modified_to_stage', django_fsm.FSMField(max_length=50, null=True, protected=True)),
-                ('by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
-                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.DocumentFile')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Filer',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('filepond', models.FileField(upload_to=app.models.document_directory_path)),
-                ('document_reference', models.CharField(max_length=40, null=True)),
-                ('file_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='app.DocumentFile')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='DocumentFileDetail',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('document_barcode', models.CharField(max_length=255, unique=True)),
-                ('document_name', models.CharField(blank=True, max_length=255)),
-                ('document_content', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
-                ('document_file_path', models.CharField(max_length=100, null=True)),
-                ('created_on', models.DateTimeField(auto_now_add=True)),
-                ('flagged', models.BooleanField(default=False)),
-                ('state', django_fsm.FSMField(default='Opened', max_length=50, protected=True)),
-                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='doc_assigned_to', to=settings.AUTH_USER_MODEL)),
-                ('doc_created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='doc_created_by', to=settings.AUTH_USER_MODEL)),
-                ('document_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.DocumentType')),
-                ('file_reference', models.ForeignKey(db_column='file_reference', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.DocumentFile')),
-            ],
-        ),
-        migrations.AddField(
-            model_name='documentfile',
-            name='file_type',
-            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.DocumentFileType'),
-        ),
-    ]
Index: TODO
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Files (Validate)\r\nRejection Forms (allan)\r\n\r\nCreate Escalation Tables For Files And Documents\r\nCreate Receiver Tables
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TODO	(revision a5c534ddacd4f742152ecaa98ccd6191508ff43d)
+++ TODO	(date 1589907110262)
@@ -1,5 +1,0 @@
-Files (Validate)
-Rejection Forms (allan)
-
-Create Escalation Tables For Files And Documents
-Create Receiver Tables
\ No newline at end of file
Index: templates/file/file_history.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/file/file_history.html	(date 1589920935975)
+++ templates/file/file_history.html	(date 1589920935975)
@@ -0,0 +1,6 @@
+{% extends 'base.html' %}
+
+{% block content %}
+    <div class="row">
+    </div>
+{% endblock content %}
\ No newline at end of file
Index: templates/user/history.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/user/history.html	(date 1589920323346)
+++ templates/user/history.html	(date 1589920323346)
@@ -0,0 +1,6 @@
+{% extends 'base.html' %}
+
+{% block content %}
+    <div class="row">
+    </div>
+{% endblock content %}
\ No newline at end of file
Index: edms/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for edms project.\r\n\r\nGenerated by 'django-admin startproject' using Django 3.0.4.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/3.0/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/3.0/ref/settings/\r\n\"\"\"\r\n\r\nimport os\r\n\r\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'rg$$9il&lqqfi57njx=9!*f_guufsmyz3v(1s1)t=bjr4zbv6d'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'app.apps.AppConfig',\r\n    'crispy_forms',\r\n    'django_jsonforms',\r\n    'django_tables2',\r\n    'django_filters',\r\n    'rest_framework',\r\n    'bootstrap4',\r\n    'django_fsm',\r\n]\r\nJSONFORMS_SCHEMA_DIR = '/static/'\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'edms.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [os.path.join(BASE_DIR, 'templates')]\r\n        ,\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'edms.wsgi.application'\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\r\nDOCKER = False\r\n\r\nif DOCKER:\r\n    DATABASES = {\r\n        'default': {\r\n            'ENGINE': 'django.db.backends.postgresql_psycopg2',\r\n            'NAME': 'postgress',\r\n            'USER': 'postgres',\r\n            'HOST': 'db',\r\n            'PORT': '5432',\r\n            'PASSWORD': 'password'\r\n\r\n        }\r\n\r\n    }\r\n\r\nelse:\r\n    DATABASES = {\r\n        'default': {\r\n            'ENGINE': 'django.db.backends.postgresql_psycopg2',\r\n            'NAME': 'edms09',\r\n            'USER': 'postgres',\r\n            'HOST': 'localhost',\r\n            'PORT': '5432',\r\n            'PASSWORD': 'toor'\r\n        }\r\n    }\r\n\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_L10N = True\r\n\r\nUSE_TZ = True\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\r\nSTATIC_URL = '/static/'\r\nSTATIC_ROOT =  os.path.join(BASE_DIR, 'static')\r\nLOGIN_URL = 'login'\r\nMEDIA_URL = '/media/'\r\nLOGIN_REDIRECT_URL = 'profile'\r\nLOGOUT_REDIRECT_URL = 'login'\r\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- edms/settings.py	(revision a5c534ddacd4f742152ecaa98ccd6191508ff43d)
+++ edms/settings.py	(date 1589906860238)
@@ -99,11 +99,11 @@
     DATABASES = {
         'default': {
             'ENGINE': 'django.db.backends.postgresql_psycopg2',
-            'NAME': 'edms09',
+            'NAME': 'work',
             'USER': 'postgres',
             'HOST': 'localhost',
             'PORT': '5432',
-            'PASSWORD': 'toor'
+            'PASSWORD': 'password'
         }
     }
 
