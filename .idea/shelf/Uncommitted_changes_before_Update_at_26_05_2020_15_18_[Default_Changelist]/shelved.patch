Index: app/view/qa.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.mixins import LoginRequiredMixin\r\nfrom django_filters.views import FilterView\r\nfrom django_tables2 import SingleTableMixin\r\n\r\nfrom app.filters import DocumentFileFilter\r\nfrom app.models import DocumentFile\r\nfrom app.tables import QaTable\r\n\r\n\r\nclass QaFileList(LoginRequiredMixin, SingleTableMixin, FilterView):\r\n    permission_required = 'app.view_documentfile'\r\n\r\n    table_class = QaTable\r\n    template_name = 'qa/index.html'\r\n\r\n    def get_queryset(self):\r\n        if self.request.user.is_superuser:\r\n            return DocumentFile.objects.all()\r\n        elif self.request.user.has_perm('app.can_receive_file'):\r\n\r\n            q1 = DocumentFile.objects.filter(state_id = 301,\r\n                                               assigned_to = self.request.user)\r\n            q2 = DocumentFile.objects.filter(state_id = 301,\r\n                                               assigned_to = None)\r\n            return q1.union(q2)\r\n        elif self.request.user.has_perm('app.can_disassemble_file'):\r\n\r\n            q1 = DocumentFile.objects.filter(state_id=302,\r\n                                             assigned_to=self.request.user)\r\n            q2 = DocumentFile.objects.filter(state_id=302,\r\n                                             assigned_to=None)\r\n            return q1.union(q2)\r\n        elif self.request.user.has_perm('app.can_scan_file'):\r\n\r\n            q1 = DocumentFile.objects.filter(state_id=303,\r\n                                             assigned_to=self.request.user)\r\n            q2 = DocumentFile.objects.filter(state_id=303,\r\n                                             assigned_to=None)\r\n            return q1.union(q2)\r\n        elif self.request.user.has_perm('app.can_reassemble_file'):\r\n\r\n            q1 = DocumentFile.objects.filter(state_id=304,\r\n                                             assigned_to=self.request.user)\r\n            q2 = DocumentFile.objects.filter(state_id=304,\r\n                                             assigned_to=None)\r\n            return q1.union(q2)\r\n\r\n        elif self.request.user.has_perm('app.can_transcribe_file'):\r\n            q1 = DocumentFile.objects.filter(state_id=305,\r\n                                             assigned_to=self.request.user)\r\n            q2 = DocumentFile.objects.filter(state_id=305,\r\n                                             assigned_to=None)\r\n            return q1.union(q2)\r\n\r\n        elif self.request.user.has_perm('app.can_qa_file'):\r\n            q1 = DocumentFile.objects.filter(state_id=306,\r\n                                             assigned_to=self.request.user)\r\n            q2 = DocumentFile.objects.filter(state_id=306,\r\n                                             assigned_to=None)\r\n            return q1.union(q2)\r\n\r\n        elif self.request.user.has_perm('app.can_validate_file'):\r\n            q1 = DocumentFile.objects.filter(state_id=307,\r\n                                             assigned_to=self.request.user)\r\n            q2 = DocumentFile.objects.filter(state_id=307,\r\n                                             assigned_to=None)\r\n            return q1.union(q2)\r\n\r\n    filterset_class = DocumentFileFilter\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/view/qa.py	(revision d01bf0d93f4c20e314af8816ad3a4345fcddd69d)
+++ app/view/qa.py	(date 1590485951866)
@@ -1,10 +1,11 @@
 from django.contrib.auth.mixins import LoginRequiredMixin
+from django.shortcuts import render
 from django_filters.views import FilterView
 from django_tables2 import SingleTableMixin
 
 from app.filters import DocumentFileFilter
-from app.models import DocumentFile
-from app.tables import QaTable
+from app.models import DocumentFile, DocumentFileDetail
+from app.tables import QaTable,ValidateQADocTable
 
 
 class QaFileList(LoginRequiredMixin, SingleTableMixin, FilterView):
@@ -67,3 +68,9 @@
             return q1.union(q2)
 
     filterset_class = DocumentFileFilter
+
+
+def open_file_for_qa(request,id):
+    file = DocumentFile.objects.get(pk=id)
+    table= ValidateQADocTable(DocumentFileDetail.objects.filter(file_reference=id))
+    return render(request, 'qa/documents.html', {'file':file,'table':table})
\ No newline at end of file
Index: app/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import messages\r\nfrom django.utils import timezone\r\nfrom django.contrib.contenttypes.models import ContentType\r\nfrom django.contrib.auth.views import PasswordChangeForm\r\nfrom django.contrib.auth import logout\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.contrib.auth.mixins import LoginRequiredMixin\r\nimport urllib.parse\r\nfrom django.contrib.auth.views import LoginView\r\nfrom .models import Modification\r\nfrom django.contrib.auth.models import Group, User, Permission\r\nfrom django.contrib.messages.views import SuccessMessageMixin\r\nfrom django.http import HttpResponseRedirect\r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom django_filters.views import FilterView\r\nfrom django_tables2 import RequestConfig\r\nfrom django_tables2.views import SingleTableMixin\r\n\r\nfrom .mixin import LoggedInRedirectMixin\r\n\r\nfrom django.urls import reverse_lazy, reverse\r\nfrom django.views.generic import ListView, DetailView\r\nfrom django.views.generic.base import View\r\nfrom django.views.generic.edit import DeleteView, CreateView, UpdateView\r\nfrom django_jsonforms.forms import JSONSchemaForm\r\nimport urllib\r\nfrom json2html import *\r\n\r\nfrom .decorators import unauthenticated_user\r\nfrom .forms import LoginForm, UserRegistrationForm, \\\r\n    PasswordResetForm, GroupCreationForm\r\nfrom .models import DocumentFile, DocumentFileType, DocumentType, DocumentFileDetail, Batch\r\nfrom .tables import DocumentTable\r\nfrom .filters import DocumentFilter\r\n\r\n\r\n@login_required\r\ndef edit_file(request, file_type):\r\n    if file_type:\r\n        file = get_object_or_404(DocumentFileType, pk=file_type)\r\n\r\n        return render(request, 'view_document_files.html', {'file': file})\r\n\r\n\r\n@login_required\r\ndef manage_documents(request, file_type):\r\n    if file_type:\r\n        file = get_object_or_404(DocumentFileType, pk=file_type)\r\n        documents = DocumentFile.objects.filter(file_type=file_type)\r\n        form = None\r\n        # form = DOcumentForm()\r\n        context = {'file': file, 'documents': documents, 'form': form}\r\n        return render(request, 'upload_document.html', context)\r\n\r\n\r\nclass AdminView(LoginRequiredMixin, View):\r\n    template_name = 'home.html'\r\n\r\n    permission_required = ''\r\n\r\n    def get(self, request):\r\n        return render(request, self.template_name)\r\n\r\n\r\nclass FileTypeDelete(LoginRequiredMixin, SuccessMessageMixin, DeleteView):\r\n    permission_required = 'app.delete_documentfiletype'\r\n    model = DocumentFileType\r\n    success_message = 'Deleted created successfully'\r\n    success_url = reverse_lazy('list_file_types')\r\n\r\n    def test_func(self):\r\n        if self.request.user.profile.first_login:\r\n            return False\r\n        else:\r\n            return True\r\n\r\n\r\nclass FilesView(LoginRequiredMixin, ListView):\r\n    permission_required = 'app.add_documentfile'\r\n    template_name = 'file/index.html'\r\n\r\n    def get_queryset(self):\r\n        return DocumentFile.objects.filter(batch=Batch.objects.get(pk=self.kwargs['batch_id']))\r\n\r\n\r\nclass DocumentTranscribe(LoginRequiredMixin, SingleTableMixin, FilterView):\r\n    permission_required = 'app.add_documentfiledetail'\r\n    table_class = DocumentTable\r\n    template_name = 'file_documents_list.html'\r\n    filterset_class = DocumentFilter\r\n\r\n    def get_queryset(self):\r\n        queryset = DocumentFileDetail.objects.filter(file_reference_id=self.kwargs['file_reference'])\r\n        self.table = DocumentTable(queryset)\r\n        self.filter = DocumentFilter(self.request.GET,\r\n                                     DocumentFileDetail.objects.filter(file_reference_id=self.kwargs['file_reference']))\r\n        self.table = DocumentTable(self.filter.qs)\r\n        RequestConfig(self.request, paginate={'per_page': 10}).configure(self.table)\r\n\r\n    def get_context_data(self, **kwargs):\r\n        context = super().get_context_data()\r\n        context['table'] = self.table\r\n        context['filter'] = self.filter\r\n\r\n        context['file_ref_no'] = self.kwargs['file_reference']\r\n        return context\r\n\r\n\r\n@login_required\r\ndef get_document_and_document_type(request, doc_id, file_type):\r\n    document = get_object_or_404(DocumentFileDetail, pk=doc_id)\r\n    document_type = DocumentType.objects.get(pk=file_type)\r\n    form = JSONSchemaForm(schema=document_type.document_field_specs, options={\"theme\": \"bootstrap3\"})\r\n    return render(request, 'transcription_lab.html', {'form': form, 'document': document})\r\n\r\n\r\ndef get_document_list(request, file_reference):\r\n    documents = DocumentFileDetail.objects.filter(file_reference=file_reference);\r\n\r\n    return render(request, 'files_list.html', {'documents': documents})\r\n\r\n\r\n@login_required\r\ndef update_document_content(request, doc_id):\r\n    document = DocumentFileDetail.objects.get(id=doc_id)\r\n    document.document_content = request.POST.get('json')\r\n    document.save()\r\n    return redirect('view_docs_in_file', document.file_reference_id)\r\n\r\n\r\n@login_required\r\ndef validate_document_content(request, doc_id):\r\n    document = DocumentFileDetail.objects.get(id=doc_id)\r\n    content = document.document_content\r\n    table_data = json2html.convert(json=content, table_attributes=\"id=\\\"info-table\\\" class=\\\"table table-bordered \"\r\n                                                                  \"table-hover\\\"\")\r\n    return render(request, 'validate.html', {'table_data': table_data, 'document': document})\r\n\r\n\r\nclass Login(LoggedInRedirectMixin, LoginView):\r\n    template_name = 'login.html'\r\n    def form_valid(self, form):\r\n        print(form.get_user())\r\n        # form is valid (= correct password), now check if user requires to set own password\r\n        if form.get_user().profile.first_login:\r\n\r\n            return redirect(reverse_lazy('user.changepass', kwargs={'username': form.get_user().username}))\r\n\r\n\r\n        return super().form_valid(form)\r\n\r\n\r\ndef change_password(request, username):\r\n    user = User.objects.get(username=username)\r\n    print(f'user{user.password}')\r\n\r\n    if request.method == 'POST':\r\n        # user=authenticate(username=user.username, password=request.POST.get('old_password'))\r\n        print(user)\r\n        form = PasswordChangeForm(data=request.POST, user=user)\r\n\r\n        if form.is_valid():\r\n\r\n            form.save()\r\n            user.refresh_from_db()\r\n            user.profile.first_login = False\r\n            user.save()\r\n            # update_session_auth_hash(request, form.user)\r\n\r\n            messages.success(request, 'Password Changed Successfully, you can now login')\r\n            return redirect(reverse('login'))\r\n        else:\r\n            messages.error(request, form.error_messages)\r\n            return redirect(reverse('user.changepass', kwargs={'username': user.username}))\r\n    else:\r\n        form = PasswordChangeForm(user=user)\r\n\r\n        args = {'form': form}\r\n        return render(request, 'reset_password.html', args)\r\n\r\n\r\n@login_required\r\ndef password_reset(request):\r\n    if request.method == 'POST':\r\n        form = PasswordResetForm(user=request.user, data=request.POST)\r\n\r\n        if form.is_valid():\r\n\r\n            form.save()\r\n            u = user\r\n            print(u)\r\n            u.refresh_from_db()\r\n            u.profile.first_Login = False\r\n            u.save()\r\n            logout(request)\r\n            return redirect('login')\r\n        else:\r\n            print(form.error_messages)\r\n    else:\r\n        form = PasswordResetForm(user=request.user)\r\n    return render(request, 'reset_password.html', {'form': form, })\r\n\r\n\r\n@login_required\r\ndef add_group(request):\r\n    form = GroupCreationForm(request.POST)\r\n    if form.is_valid():\r\n        form.save()\r\n\r\n        messages.success(request, f\"Group Created successfully\")\r\n        return redirect('groups.index')\r\n\r\n    else:\r\n        form = GroupCreationForm()\r\n    return render(request, 'create_group.html', {'form': form})\r\n\r\n\r\nclass UserListView(LoginRequiredMixin, ListView):\r\n    model = User\r\n    template_name = 'users.html'\r\n\r\n\r\nclass UserDetailView(LoginRequiredMixin, DetailView):\r\n    permission_required = 'auth.view_user'\r\n\r\n    model = User\r\n    template_name = 'user_details.html'\r\n\r\n\r\nclass GroupListView(LoginRequiredMixin, ListView):\r\n    permission_required = 'auth.view_user'\r\n\r\n    model = Group\r\n    template_name = 'groups.html'\r\n\r\n\r\nclass UserUpdateView(LoginRequiredMixin, UpdateView):\r\n    permission_required = 'auth.change_user'\r\n\r\n    model = User\r\n    success_url = '/users/'\r\n\r\n    fields = ['username', 'email', 'groups', 'is_superuser']\r\n    template_name = 'edit_user.html'\r\n\r\n\r\nclass GroupUpdateView(LoginRequiredMixin, UpdateView):\r\n    permission_required = 'auth.change_group'\r\n\r\n    model = Group\r\n    success_url = '/roles/'\r\n\r\n    fields = ['name', 'permissions']\r\n    template_name = 'multi_auth/groups/create.html'\r\n\r\n\r\nclass UserDeleteView(LoginRequiredMixin, DeleteView):\r\n    permission_required = 'auth.delete_user'\r\n\r\n    model = User\r\n    success_url = '/users/'\r\n    template_name = ''\r\n\r\n\r\n@login_required\r\ndef user_create(request):\r\n    if request.method == 'POST':\r\n        form = UserRegistrationForm(request.POST)\r\n        if form.is_valid():\r\n            id_no = form.cleaned_data.get('id_no')\r\n            email = form.cleaned_data.get('email')\r\n            username = id_no\r\n            password = id_no\r\n            groups = form.cleaned_data.get('groups')\r\n            is_superuser = request.POST.get('is_superuser')\r\n            user = None\r\n            if is_superuser:\r\n\r\n                user = User.objects.create_superuser(username, email, password)\r\n            else:\r\n                user = User.objects.create_user(username, email, password)\r\n                user.groups.set(groups)\r\n            user.refresh_from_db()\r\n            user.profile.id_no = form.cleaned_data.get('id_no')\r\n            user.profile.phone = form.cleaned_data.get('phone')\r\n            user.profile.full_name = form.cleaned_data.get('full_name')\r\n            user.save()\r\n            messages.success(request, f'User created successfully!')\r\n            return redirect('users.index')\r\n\r\n    else:\r\n        form = UserRegistrationForm()\r\n    return render(request, 'create_user.html', {\r\n        'groups': Group.objects.all(),\r\n        'form': form,\r\n    })\r\n\r\n\r\n@login_required\r\ndef group_create(request):\r\n    return render(request, 'create_group.html')\r\n\r\n\r\nclass GroupCreateView(LoginRequiredMixin, CreateView):\r\n    model = Group\r\n\r\n    permission_required = 'auth.view_group'\r\n    permissions = Permission.objects.all()\r\n    extra_context = permissions\r\n    template_name = 'create_group.html'\r\n    fields = ['name', 'permission']\r\n    success_url = 'home'\r\n\r\n\r\n@login_required\r\ndef registry_batch_submit(request, batch_id):\r\n    batch = Batch.objects.get(pk=batch_id)\r\n    if batch and int(batch.state.state_code) <= 300:\r\n        files = DocumentFile.objects.filter(batch=batch)\r\n        docs = DocumentFileDetail.objects.filter(file_reference__in=files)\r\n\r\n        new_state = 301\r\n        if files and docs:\r\n            try:\r\n                docs.update(state_id=new_state, )\r\n                files.update(state_id=new_state)\r\n                batch.state_id = new_state\r\n                batch.save()\r\n                messages.success(request, 'Submitted successfully')\r\n            except AttributeError as e:\r\n                messages.error(request, ' something wrong happened')\r\n\r\n        else:\r\n            messages.warning(request, 'Empty batch or files ')\r\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\r\n\r\n\r\n@login_required\r\ndef receiver_batch_submit(request, batch_id):\r\n    batch = Batch.objects.get(pk=batch_id)\r\n    if batch and int(batch.state.state_code) <= 301:\r\n        files = DocumentFile.objects.filter(batch=batch)\r\n        docs = DocumentFileDetail.objects.filter(file_reference__in=files)\r\n\r\n        new_state = 302\r\n        desc = None\r\n        if request.POST.get('desc') != '':\r\n            new_state = 401\r\n            desc = request.POST.get('desc')\r\n\r\n        try:\r\n            docs.update(state_id=new_state, )\r\n            files.update(state_id=new_state)\r\n            batch.state_id = new_state\r\n            batch.rejection_by_receiver_dec = desc\r\n            batch.received_on = timezone.now()\r\n            batch.save()\r\n            messages.success(request, 'Submitted successfully')\r\n        except AttributeError as e:\r\n            messages.error(request, ' something wrong happened')\r\n\r\n    return redirect('batch_index')\r\n\r\n\r\ndef get_file(request, file_ref=None):\r\n    if not file_ref == None:\r\n        file = DocumentFile.objects.get(pk=file_ref)\r\n\r\n        print(f'file ={file}')\r\n        if file :\r\n            print(f'has perms to acces file {file}')\r\n            return file\r\n\r\n    return None\r\n\r\n\r\n\r\ndef get_docs_from_file(request, file):\r\n\r\n    docs = DocumentFileDetail.objects.filter(file_reference=file)\r\n    if docs:\r\n        return docs\r\n    return None\r\n\r\n\r\n\r\n@login_required\r\ndef request_file(request):\r\n    if request.user.has_perm('app.can_transcribe_file'):\r\n\r\n        file = DocumentFile.objects.filter(state_id=305, assigned_to=None).first()\r\n        if file:\r\n            try:\r\n                returned_object_type = ContentType.objects.get(app_label='app', model='documentfile')\r\n                file.assigned_to = request.user\r\n                file.save()\r\n                Modification.objects.create(object_type=returned_object_type, object_pk=file.pk,\r\n                                            modified_from_state=file.state, by=request.user)\r\n                messages.success(request, 'New file given')\r\n\r\n            except AttributeError as e:\r\n                messages.error(request, ' something wrong happened')\r\n        else:\r\n            messages.warning(request, 'No files Available')\r\n    else:\r\n        messages.error(request, \"Don't have this permission\")\r\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\r\n\r\n\r\ndef abort(request):\r\n    return render(request, 'app/others/lock_screen.html')\r\n\r\n\r\ndef file_submit(request, file_ref):\r\n    file = get_file(request, file_ref)\r\n\r\n\r\n    docs = get_docs_from_file(request, file)\r\n\r\n    print(docs)\r\n    desc = None\r\n    if request.POST.get('desc') != None:\r\n        desc = request.POST.get('desc')\r\n        change_state(request, file, docs, True, desc)\r\n    else:\r\n        change_state(request, file, docs, False, desc)\r\n    messages.success(request, 'Updated Successfull')\r\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\r\n\r\n\r\ndef change_state(request, file=None, docs=None, is_reject=None, desc=None):\r\n    file = file\r\n    docs = docs\r\n    print(f'changes {file.state.state_code} and {docs}')\r\n    if file:\r\n        # file and docs\r\n        current_state_code = int(file.state.state_code)\r\n        desc = desc\r\n        new_state = None\r\n        print(f'changes {file.state.state_code} and {docs}')\r\n\r\n        if current_state_code == 302 and file.file_scanned_by == request.user:\r\n\r\n            docs.update(state_id=303,\r\n                        scanned_on=timezone.now()\r\n                        )\r\n            print(f'state{new_state}')\r\n            file.state_id = 303\r\n            file.scanned_on = timezone.now()\r\n            file.save()\r\n            messages.success(request, 'File Updated successfully')\r\n            return redirect(request, 'list_document_files')\r\n        elif current_state_code == 303 and file.file_transcribed_by == request.user:\r\n            messages.success(request, 'File Updated successfully')\r\n\r\n        elif current_state_code == 303 and file.file_transcribed_by == request.user:\r\n            docs.update(state=new_state,\r\n                        transcribed_on=timezone.now(),\r\n                        rejection_by_transcriber_dec=desc\r\n                        )\r\n            file.state = new_state\r\n            file.transcribed_on = timezone.now()\r\n            file.rejection_by_transcriber_dec = desc\r\n            file.save()\r\n\r\n        elif current_state_code == 304 and not file.file_qa_by:\r\n            docs.update(state=new_state,\r\n                        qa_on=timezone.now(),\r\n                        rejection_by_qa_dec=desc\r\n                        )\r\n            file.state = new_state\r\n            file.file_qa_by = request.user\r\n            file.qa_on = timezone.now()\r\n            file.rejection_by_qa_dec = desc\r\n            file.save()\r\n        elif current_state_code == 305 and not file.file_validated_by:\r\n            docs.update(state=new_state,\r\n                        validated_on=timezone.now(),\r\n                        rejection_by_validation_dec=desc\r\n                        )\r\n            file.state = new_state\r\n            file.file_validated_by = request.user\r\n            file.validated_on = timezone.now()\r\n\r\n            file.rejection_by_validation_dec = desc\r\n            file.save()\r\n\r\n    else:\r\n        messages.warning(request, 'Empty file not allowed')\r\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\r\n\r\n\r\ndef start_receive(request, batch_id):\r\n    batch = Batch.objects.get(pk=batch_id)\r\n\r\n    if batch and batch.state.state_code == '301' and batch.received_by == None:\r\n        try:\r\n            batch.received_by = request.user\r\n            batch.save()\r\n            return redirect(reverse_lazy('files.view', kwargrs={'batch_id': batch_id}))\r\n        except AttributeError as e:\r\n            messages.error(request, ' something wrong happened')\r\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\r\n\r\n\r\ndef start_scanning(request, file_ref):\r\n    file = get_file(request, urllib.parse.unquote(file_ref))\r\n    print(file)\r\n\r\n    if file and file.state.state_code == '302' and file.file_scanned_by == None:\r\n\r\n        docs = get_docs_from_file(request, file)\r\n\r\n        try:\r\n            docs.update(\r\n                doc_scanned_by=request.user\r\n            )\r\n\r\n            file.file_scanned_by = request.user\r\n            file.save()\r\n            return render(request, 'upload_document.html', {'file': file})\r\n        except AttributeError as e:\r\n            messages.error(request, ' something wrong happened')\r\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\r\n\r\n\r\ndef start_qa(request, file_ref):\r\n    file = get_file(request, urllib.parse.unquote(file_ref))\r\n    if file and file.state.state_code == '304' and file.file_qa_by == None:\r\n\r\n        docs = get_docs_from_file(request, file)\r\n\r\n        try:\r\n            docs.update(\r\n                doc_qa_by=request.user\r\n            )\r\n            file.file_qa_by = request.user\r\n            file.save()\r\n            return render(request, 'upload_document.html', {'file': file})\r\n        except AttributeError as e:\r\n            messages.error(request, ' something wrong happened')\r\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\r\n\r\n\r\ndef start_validate(request, file_ref):\r\n    file = get_file(request, urllib.parse.unquote(file_ref))\r\n    print(file)\r\n\r\n    if file and file.state.state_code == '305' and file.file_validated_by == None:\r\n\r\n        docs = get_docs_from_file(request, file)\r\n\r\n\r\n        try:\r\n            docs.update(\r\n                doc_validated_by=request.user\r\n            )\r\n\r\n            file.file_validated_by = request.user\r\n            file.save()\r\n            return render(request, 'upload_document.html', {'file': file})\r\n        except AttributeError as e:\r\n            messages.error(request, ' something wrong happened')\r\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\r\n\r\n\r\ndef registry_submit(request, batch_id):\r\n    batch = Batch.objects.get(pk=batch_id)\r\n    print(batch)\r\n    batch.state_id = 301\r\n    batch.save()\r\n    messages.success(request, 'Submitted successfully')\r\n    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/views.py	(revision d01bf0d93f4c20e314af8816ad3a4345fcddd69d)
+++ app/views.py	(date 1590486607932)
@@ -132,6 +132,7 @@
 def validate_document_content(request, doc_id):
     document = DocumentFileDetail.objects.get(id=doc_id)
     content = document.document_content
+    print(content)
     table_data = json2html.convert(json=content, table_attributes="id=\"info-table\" class=\"table table-bordered "
                                                                   "table-hover\"")
     return render(request, 'validate.html', {'table_data': table_data, 'document': document})
@@ -526,7 +527,7 @@
 
 def start_qa(request, file_ref):
     file = get_file(request, urllib.parse.unquote(file_ref))
-    if file and file.state.state_code == '304' and file.file_qa_by == None:
+    if file:
 
         docs = get_docs_from_file(request, file)
 
Index: app/tables.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import django_tables2 as tables\r\nfrom django.utils.html import format_html\r\nfrom django_tables2 import TemplateColumn\r\nfrom .models import DocumentFile, DocumentFileDetail, Batch, Modification\r\n\r\n\r\nclass BatchTable(tables.Table):\r\n    # transitions = tables.Column(accessor='get_transition_options',verbose_name='Transition')\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped table-responsive\"}\r\n        model = Batch\r\n        template_name = \"django_tables2/bootstrap4.html\"\r\n        fields = (\"batch_no\", \"created_on\", \"created_by\", \"state\", \"description\")\r\n\r\n    files = TemplateColumn(template_name='batch/total_column.html')\r\n    actions = TemplateColumn(template_name='batch/view_column.html')\r\n\r\nclass ReturnBatchTable(tables.Table):\r\n    # transitions = tables.Column(accessor='get_transition_options',verbose_name='Transition')\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped table-responsive\"}\r\n        model = Batch\r\n        template_name = \"django_tables2/bootstrap4.html\"\r\n        fields = (\"batch_no\", \"created_on\", \"created_by\", \"state\", \"description\")\r\n\r\n    files = TemplateColumn(template_name='batch/total_column.html')\r\n    actions = TemplateColumn(template_name='batch/view_column.html')\r\n\r\nclass BatchFileTable(tables.Table):\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped\"}\r\n        model = DocumentFile\r\n        template_name = \"django_tables2/bootstrap.html\"\r\n        fields = (\"file_reference\", \"file_type\", \"state\", \"stage\", \"captured_by\", \"file_barcode\", \"created_on\")\r\n\r\n    docs = TemplateColumn(template_name='file/total_column.html')\r\n    change_state = TemplateColumn(template_name='batch/file_state_column.html')\r\n    move_stage = TemplateColumn(template_name='batch/file_view_column.html')\r\n\r\n\r\n\r\nclass BatchDocumentTable(tables.Table):\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped\"}\r\n        model = DocumentFileDetail\r\n        template_name = \"django_tables2/bootstrap4.html\"\r\n        fields = (\"file_reference_id\", \"document_barcode\", \"state\", \"document_name_id\", \"document_file_path\")\r\n\r\n    actions = TemplateColumn(template_name='app/document_transcribe.html')\r\n\r\n\r\n\r\nclass DocumentFileTable(tables.Table):\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped\"}\r\n        model = DocumentFile\r\n        template_name = \"django_tables2/bootstrap.html\"\r\n        fields = (\"file_reference\", \"file_type\", \"state\", \"captured_by\", \"file_barcode\", \"created_on\")\r\n\r\n\r\n    docs = TemplateColumn(template_name='file/total_column.html')\r\n    action = TemplateColumn(template_name='file/view_column.html')\r\n\r\n    def render_file_reference(self, value, record):\r\n        return format_html('<a href=\"{}\">{}</a>'.format('file_details/{}'.format(record.pk),value))\r\n    # transcribe = TemplateColumn(template_name='app/document_action_column.html')\r\n\r\nclass EscalatedFileTable(tables.Table):\r\n\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped\"}\r\n        row_attrs = {\r\n            \"class\": lambda record: \"bg-red\" if record.flagged else \"bg-default\"\r\n        }\r\n        model = DocumentFile\r\n        template_name = \"django_tables2/bootstrap.html\"\r\n        fields = (\"file_reference\", \"file_type\", \"state\", \"captured_by\", \"file_barcode\", \"created_on\")\r\n\r\n    docs = TemplateColumn(template_name='file/total_column.html')\r\n    action = TemplateColumn(template_name='file/view_column.html')\r\n    # transcribe = TemplateColumn(template_name='app/document_action_column.html')\r\n\r\nclass DocumentTable(tables.Table):\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped\"}\r\n        model = DocumentFileDetail\r\n        template_name = \"django_tables2/bootstrap4.html\"\r\n        fields = (\"file_reference_id\", \"document_barcode\", \"document_file_path\")\r\n\r\n    actions = TemplateColumn(template_name='app/document_transcribe.html')\r\n\r\n\r\nclass ValidationTable(tables.Table):\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped\"}\r\n        model = DocumentFile\r\n        template_name = \"django_tables2/bootstrap.html\"\r\n        fields = (\"file_reference\", \"file_type\", \"state\", \"captured_by\", \"file_barcode\", \"created_on\")\r\n\r\n    docs = TemplateColumn(template_name='file/total_column.html')\r\n    validate = TemplateColumn(template_name='file/validator_column.html')\r\n\r\n\r\nclass QaTable(tables.Table):\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped\"}\r\n        model = DocumentFile\r\n        template_name = \"django_tables2/bootstrap.html\"\r\n        fields = (\"file_reference\", \"file_type\", \"state\", \"captured_by\", \"file_barcode\", \"created_on\")\r\n\r\n    docs = TemplateColumn(template_name='file/total_column.html')\r\n    action = TemplateColumn(template_name='file/qa_column.html')\r\n\r\n\r\nclass ScannerTable(tables.Table):\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped\"}\r\n        model = DocumentFile\r\n        template_name = \"django_tables2/bootstrap.html\"\r\n        fields = (\"file_reference\", \"state\", \"file_barcode\", \"created_on\")\r\n\r\n    docs = TemplateColumn(template_name='file/total_column.html')\r\n    action = TemplateColumn(template_name='file/scan.html')\r\n\r\n\r\nclass TranscribeTable(tables.Table):\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped\"}\r\n        model = DocumentFile\r\n        template_name = \"django_tables2/bootstrap.html\"\r\n        fields = (\"file_reference\", \"file_type\", \"state\", \"captured_by\", \"file_barcode\", \"created_on\")\r\n\r\n    docs = TemplateColumn(template_name='file/total_column.html')\r\n    transcribe = TemplateColumn(template_name='app/document_action_column.html')\r\n\r\n\r\nclass HistoryTable(tables.Table):\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped\"}\r\n        model = Modification\r\n        template_name = \"django_tables2/bootstrap.html\"\r\n        fields = (\"file\", \"modified_from_stage\", \"modified_to_stage\", \"by\", \"created_at\")\r\n\r\n    view = TemplateColumn(template_name='file/view_history.html')\r\n\r\n\r\nclass SpecificFileUserHistoryTable(tables.Table):\r\n    class Meta:\r\n        attrs = {\"class\": \"table table-bordered table-striped\"}\r\n        model = Modification\r\n        template_name = \"django_tables2/bootstrap.html\"\r\n        fields = ( \"modified_from_stage\", \"modified_to_stage\",  \"created_at\")\r\n\r\n\r\nclass AdminTable(tables.Table):\r\n    class Meta:\r\n        attrs = {\"class\":\"table table-bordered table-striped\"}\r\n        model = DocumentFile\r\n        template_name = \"django_tables2/bootstrap.html\"\r\n        fields = (\"file\",)\r\n\r\n    actions = TemplateColumn(template_name='file/view_history.html')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/tables.py	(revision d01bf0d93f4c20e314af8816ad3a4345fcddd69d)
+++ app/tables.py	(date 1590484245684)
@@ -15,6 +15,7 @@
     files = TemplateColumn(template_name='batch/total_column.html')
     actions = TemplateColumn(template_name='batch/view_column.html')
 
+
 class ReturnBatchTable(tables.Table):
     # transitions = tables.Column(accessor='get_transition_options',verbose_name='Transition')
     class Meta:
@@ -26,6 +27,7 @@
     files = TemplateColumn(template_name='batch/total_column.html')
     actions = TemplateColumn(template_name='batch/view_column.html')
 
+
 class BatchFileTable(tables.Table):
     class Meta:
         attrs = {"class": "table table-bordered table-striped"}
@@ -38,7 +40,6 @@
     move_stage = TemplateColumn(template_name='batch/file_view_column.html')
 
 
-
 class BatchDocumentTable(tables.Table):
     class Meta:
         attrs = {"class": "table table-bordered table-striped"}
@@ -49,7 +50,6 @@
     actions = TemplateColumn(template_name='app/document_transcribe.html')
 
 
-
 class DocumentFileTable(tables.Table):
     class Meta:
         attrs = {"class": "table table-bordered table-striped"}
@@ -57,16 +57,15 @@
         template_name = "django_tables2/bootstrap.html"
         fields = ("file_reference", "file_type", "state", "captured_by", "file_barcode", "created_on")
 
-
     docs = TemplateColumn(template_name='file/total_column.html')
     action = TemplateColumn(template_name='file/view_column.html')
 
     def render_file_reference(self, value, record):
-        return format_html('<a href="{}">{}</a>'.format('file_details/{}'.format(record.pk),value))
+        return format_html('<a href="{}">{}</a>'.format('file_details/{}'.format(record.pk), value))
     # transcribe = TemplateColumn(template_name='app/document_action_column.html')
 
+
 class EscalatedFileTable(tables.Table):
-
     class Meta:
         attrs = {"class": "table table-bordered table-striped"}
         row_attrs = {
@@ -80,6 +79,7 @@
     action = TemplateColumn(template_name='file/view_column.html')
     # transcribe = TemplateColumn(template_name='app/document_action_column.html')
 
+
 class DocumentTable(tables.Table):
     class Meta:
         attrs = {"class": "table table-bordered table-striped"}
@@ -149,14 +149,24 @@
         attrs = {"class": "table table-bordered table-striped"}
         model = Modification
         template_name = "django_tables2/bootstrap.html"
-        fields = ( "modified_from_stage", "modified_to_stage",  "created_at")
+        fields = ("modified_from_stage", "modified_to_stage", "created_at")
 
 
 class AdminTable(tables.Table):
     class Meta:
-        attrs = {"class":"table table-bordered table-striped"}
+        attrs = {"class": "table table-bordered table-striped"}
         model = DocumentFile
         template_name = "django_tables2/bootstrap.html"
         fields = ("file",)
 
-    actions = TemplateColumn(template_name='file/view_history.html')
\ No newline at end of file
+    actions = TemplateColumn(template_name='file/view_history.html')
+
+
+class ValidateQADocTable(tables.Table):
+    class Meta:
+        attrs = {"class": "table table-bordered table-striped"}
+        model = DocumentFileDetail
+        template_name = "django_tables2/bootstrap.html"
+        fields = ("file_reference_id", "document_barcode", "document_file_path")
+
+    actions = TemplateColumn(template_name='document/inspect.html')
Index: templates/file/qa_column.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n{% load app_extras %}\r\n<button class=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                <i class=\"fa fa-ellipsis-v\"></i>\r\n            </button>\r\n            <div class=\"dropdown-menu\">\r\n              {{ record.file_reference|get_qa_buttons }}\r\n                <div role=\"separator\" class=\"dropdown-divider\"></div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/file/qa_column.html	(revision d01bf0d93f4c20e314af8816ad3a4345fcddd69d)
+++ templates/file/qa_column.html	(date 1590485695489)
@@ -6,6 +6,7 @@
             <div class="dropdown-menu">
               {{ record.file_reference|get_qa_buttons }}
                 <div role="separator" class="dropdown-divider"></div>
+                <a href="{% url 'open_qa_file' record.file_reference %}" class="btn btn-sm btn-info btn-block">Open</a>
             </div>
 
 
Index: templates/qa/documents.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>$Title$</title>\r\n</head>\r\n<body>\r\n$END$\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/qa/documents.html	(revision d01bf0d93f4c20e314af8816ad3a4345fcddd69d)
+++ templates/qa/documents.html	(date 1590485450763)
@@ -1,10 +1,21 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <title>$Title$</title>
-</head>
-<body>
-$END$
-</body>
-</html>
\ No newline at end of file
+{% extends 'base.html' %}
+
+{% load render_table from django_tables2 %}
+{% block content %}
+
+  <div class="row">
+        <div class="col-12">
+          <div class="card">
+            <div class="card-header">
+
+              <h3 class="card-title">Documents In File</h3>
+            </div>
+            <!-- /.card-header -->
+            <div class="card-body">
+              {% render_table table %}
+            </div>
+            <!-- /.card-body -->
+          </div>
+        </div>
+  </div>
+{% endblock content %}
\ No newline at end of file
Index: templates/app/document_transcribe.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n{% if record.document_path is None %}\r\n{% if 'app.can_register_batch' in perms and not user.is_superuser %}\r\n    <a class=\"btn btn-danger btn-sm\" href=\"{% url 'document_delete' record.pk %}\"><i class=\"fas fa-trash\"></i></a>\r\n\r\n{% elif 'app.can_transcribe_file' in perms and not user.is_superuser  %}\r\n<a class=\"btn btn-secondary btn-sm\" href=\"{% url 'transcription_lab' record.id record.document_type_id %}\">Transcribe</a>\r\n{% elif 'app.can_qa_file' in perms  and not user.is_superuser%}\r\n    <a class=\"btn btn-info btn-sm\" href=\"{% url 'validate_doc_content' record.id  %}\">Check Quality</a>\r\n    {% elif 'app.can_validate_file' in perms  and not user.is_superuser%}\r\n    <a class=\"btn btn-info btn-sm\" href=\"{% url 'validate_doc_content' record.id  %}\">Validate</a>\r\n{% endif %}\r\n\r\n<a class=\"btn btn-outline-warning btn-sm \" href=\"{% url 'get_files_from_storage' record.file_reference %}\">Map Documents </a>\r\n{% endif %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/app/document_transcribe.html	(revision d01bf0d93f4c20e314af8816ad3a4345fcddd69d)
+++ templates/app/document_transcribe.html	(date 1590487972473)
@@ -12,4 +12,5 @@
 {% endif %}
 
 <a class="btn btn-outline-warning btn-sm " href="{% url 'get_files_from_storage' record.file_reference %}">Map Documents </a>
+    <a class="btn btn-secondary btn-sm" href="{% url 'transcription_lab' record.id record.document_type_id %}">Transcribe</a>
 {% endif %}
\ No newline at end of file
Index: templates/document/inspect.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>$Title$</title>\r\n</head>\r\n<body>\r\n$END$\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/document/inspect.html	(revision d01bf0d93f4c20e314af8816ad3a4345fcddd69d)
+++ templates/document/inspect.html	(date 1590486195499)
@@ -1,10 +1,15 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <title>$Title$</title>
-</head>
-<body>
-$END$
-</body>
-</html>
\ No newline at end of file
+
+{% load app_extras %}
+<button class="btn btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
+                <i class="fa fa-ellipsis-v"></i>
+            </button>
+            <div class="dropdown-menu">
+              {{ record.file_reference|get_qa_buttons }}
+                <div role="separator" class="dropdown-divider"></div>
+                <a href="{% url 'validate_doc_content' record.id %}" class="btn btn-sm btn-info btn-block">Open</a>
+            </div>
+
+
+
+
+
Index: app/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.views import LogoutView, PasswordChangeView\r\nfrom django.urls import path, re_path\r\n\r\n\r\nfrom .views import (\r\n    registry_submit, AdminView, FileTypeDelete,request_file,\r\n    DocumentTranscribe,\r\n    get_document_and_document_type,\r\n    UserListView, UserDetailView, UserUpdateView,\r\n    UserDeleteView, GroupListView, GroupUpdateView, user_create, Login,\r\n     add_group, update_document_content,\r\n    validate_document_content,\r\n    receiver_batch_submit,\r\n    start_scanning,start_qa,start_validate,change_password)\r\nfrom .view.user import reset_default_password\r\nfrom app.view.file import (\r\n                            FilesView, DocumentFileCreate, DocumentFileList,\r\n                            RejectedDocumentFileList,FileDeleteView)\r\nfrom .view.registry import (registry_submit_to_receiver, change_file_status_to_accept, change_file_status_to_accept_ajax,\r\n                            change_file_status_to_reject,change_document_status_to_accept,\r\n                            change_document_status_to_reject, return_rectified_file)\r\nfrom .view.receiver import select_file\r\nfrom app.view.batch import BatchListView, create_batch,BatchDeleteView, BatchFilesView, BatchDocumentsView, ReturnBatchListView\r\nfrom app.view.document import DocumentDeleteView, DocumentView, UploadedDocumentsList, create_document\r\nfrom app.view.document_type import DocumentTypeCreate, DocumentTypeList\r\n\r\nfrom app.view.file_type import FileTypeCreate, FileTypeList\r\nfrom app.view.scanner import upload_documents_to_file, ScannerTableView\r\nfrom app.view.transcribe import get_files_from_storage, update_document_file_detail, TranscribeFiles\r\nfrom app.view.user import profile,admin_check_user\r\nfrom .view.report import report\r\nfrom app.view.inspection import  inspect, receive\r\nfrom app.view.qa import  QaFileList\r\nfrom app.view.validate import ValidateFileList\r\n\r\nfrom app.view.states_methods import update_state_batch,update_state_file,update_state_document\r\nfrom app.view.stages_methods import update_stage_file\r\nfrom app.view.file_history import (get_file_history,get_each_user_history,\r\n    get_loggedin_user_history,user_specific_file_history,file_details)\r\nfrom app.view.escalations import RejectedDocumentFileList\r\n\r\nurlpatterns = [\r\n    path('', report, name='home'),\r\n    #submits\r\n    path('submit/<int:batch_id>', registry_submit, name='submit.registry'),\r\n\r\n    # batches\r\n    path('batches/', BatchListView.as_view(), name='batch_index'),\r\n    path('return/batches/', ReturnBatchListView.as_view(), name='batch_return'),\r\n    path('create_batch/',create_batch,name='batch_create'),\r\n    path('delete_batch/<int:pk>/', BatchDeleteView.as_view(), name='batch_delete'),\r\n    path('view/batch/<int:batch_id>/files/', BatchFilesView.as_view(), name='batch_files' ),\r\n    path('view/batch/<str:file_reference>/documents/', BatchDocumentsView.as_view(), name='batch_documents'),\r\n\r\n    # file type urls\r\n    path('create_file_type/', FileTypeCreate.as_view(), name='create_file_type'),\r\n    path('list_files_types', FileTypeList.as_view(), name='list_file_types'),\r\n    path('delete_file_type/<str:pk>/delete/', FileTypeDelete.as_view(), name='delete_file_type'),\r\n\r\n    # physical file urls\r\n    path('batch/<int:batch_id>/files', FilesView.as_view(), name='files.view'),\r\n    path('batch/<int:batch_id>/create_file/', DocumentFileCreate.as_view(), name='create_document_file'),\r\n    path('list_document_files', DocumentFileList.as_view(), name='list_document_files'),\r\n    path('list/transcribe/files', TranscribeFiles.as_view(), name='list_transcribe_files'),\r\n    path('list_of_escalated_document_files', RejectedDocumentFileList.as_view(), name='rejected_list_document_files'),\r\n    path('delete_file/<pk>/', FileDeleteView.as_view(), name='file_delete'),\r\n\r\n    # Document Types\r\n    path('create_document_type', DocumentTypeCreate.as_view(), name='create_document_type'),\r\n    path('view_document_types', DocumentTypeList.as_view(), name='list_document_types'),\r\n\r\n    # document upload and viewing\r\n    path('file/<file_ref_no>/documents', DocumentView.as_view(), name='document.view'),\r\n    path('file/<file_ref_no>/create_document/', create_document, name='document.create'),\r\n    path('uploaded_documents', UploadedDocumentsList.as_view(), name='uploaded_documents'),\r\n    path('files/upload/select',ScannerTableView.as_view(), name='get_file_to_upload_documents'),\r\n    path('upload/to/file/<str:file_reference>',upload_documents_to_file, name='upload_document'),\r\n    path('delete_document/<pk>/', DocumentDeleteView.as_view(), name='document_delete'),\r\n\r\n\r\n    # transcribe urls\r\n    path('view_docs_in_file/<str:file_reference>', DocumentTranscribe.as_view(), name='view_docs_in_file'),\r\n    path('transcription_lab/<int:doc_id>/<str:file_type>',get_document_and_document_type, name='transcription_lab'),\r\n    path('update_doc_content/<int:doc_id>', update_document_content, name='update_doc_content' ),\r\n    path('validate_doc_content/<int:doc_id>', validate_document_content, name='validate_doc_content'),\r\n\r\n    path('file/document/storage/<str:file_reference>', get_files_from_storage, name='get_files_from_storage'),\r\n    path('update/document/<int:document>',update_document_file_detail, name='update_document_file_detail'),\r\n\r\n    # Auth\r\n    path('users/', UserListView.as_view(), name='users.index'),\r\n    path('users/', UserListView.as_view(), name='users.index'),\r\n    path('users/create/', user_create, name='users.create'),\r\n    path('users/<int:pk>/', UserDetailView.as_view(), name='users.detail'),\r\n    path('users/update/<int:pk>/', UserUpdateView.as_view(), name='user.update'),\r\n    path('change_password/<username>', change_password, name='user.changepass'),\r\n\r\n    path('user/delete/<int:pk>/', UserDeleteView.as_view(), name='user.delete'),\r\n    # groups\r\n    path('roles/', GroupListView.as_view(), name='groups.index'),\r\n    path('roles/create/', add_group, name='roles.create'),\r\n    path('roles/update/<int:pk>/', GroupUpdateView.as_view(), name='groups.update'),\r\n    #\r\n\r\n    path('login/', Login.as_view(), name='login'),\r\n\r\n    path('logout/', LogoutView.as_view(), name='logout'),\r\n\r\n    path('accept_file/<pk>/', change_file_status_to_accept, name='change_file_status_to_accept'),\r\n    re_path(r'^accept_file/ajax/(?P<pk>\\w+)/$', change_file_status_to_accept_ajax, name='change_file_status_to_accept_ajax'),\r\n    path('reject_file/<pk>/', change_file_status_to_reject, name='change_file_status_to_reject'),\r\n    path('accept_document/<pk>/', change_document_status_to_accept, name='change_document_status_to_accept'),\r\n    path('reject_document/<pk>/', change_document_status_to_reject, name='change_document_status_to_reject'),\r\n    path('return_rectified_file/<pk>/', return_rectified_file, name='return_rectified_file'),\r\n\r\n    path('registry_submit_batch/<int:batch_id>/', registry_submit_to_receiver, name='registry_submit_batch'),\r\n    path('receiver_submit_batch/<int:batch_id>/', receiver_batch_submit, name='receiver_submit_batch'),\r\n\r\n    path('select_file/<pk>/', select_file, name='select_file'),\r\n    path('scan/<file_ref>/', start_scanning, name='start_scan'),\r\n    path('qa/<file_ref>/', start_qa, name='start_qa'),\r\n    path('validate/<file_ref>/', start_validate, name='start_validate'),\r\n\r\n    path('request_file', request_file, name='request_file'),\r\n\r\n    path('profile/', profile, name='profile'),\r\n    path('reset_default_password', reset_default_password, name='reset_default_password'),\r\n    path('check_user<int:pk>', admin_check_user, name='admin_check_user'),\r\n    # api endpoints\r\n    # path('api/v1/',ApiViewSet.as_view(), name='api'),\r\n\r\n    # run file and document inspection\r\n    re_path(r'^inspect/file/$', inspect, name='inspect'),\r\n    re_path(r'^inspect/file/(?P<id>\\w+)/$', inspect, name='inspect'),\r\n    re_path(r'^receive/batch/$', receive, name='receive'),\r\n    re_path(r'^receive/batch/(?P<id>\\w+)/$', receive, name='receive'),\r\n\r\n    #quality assuarance link\r\n    path('quality/files/', QaFileList.as_view(), name='quality'),\r\n    path('validate/document/files', ValidateFileList.as_view(), name='validation'),\r\n\r\n\r\n    #\r\n    #stage and states urls\r\n    #\r\n    path('update_batch_state/<pk>/<action>/', update_state_batch,name='update_state_batch'),\r\n    path('update_file_state/<pk>/<action>/', update_state_file,name='update_state_file'),\r\n    path('update_document_state/<pk>/<action>/', update_state_document,name='update_document_batch'),\r\n\r\n    #stage url\r\n\r\n    path('update_file_stage/<pk>/<action>/', update_stage_file,name='update_stage_file'),\r\n\r\n    #get file history\r\n\r\n    path('file_history/<pk>/',get_file_history,name='file_history'),\r\n\r\n    #get logged user history\r\n    path('my/history/',get_loggedin_user_history,name='logged_in_user_history'),\r\n    #user specific file history\r\n    path('history_for_file/<pk>',user_specific_file_history,name='user_specific_file_history'),\r\n\r\n#get  user history\r\n    path('user/<pk>',get_each_user_history,name='get_user_history'),\r\n\r\n\r\n#get escalated files\r\n    path('user/escalated/files',RejectedDocumentFileList.as_view(), name='my_escalated_files'),\r\n\r\n    #file details\r\n\r\n    path('file_details/<pk>',file_details, name='file_details'),\r\n\r\n]\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/urls.py	(revision d01bf0d93f4c20e314af8816ad3a4345fcddd69d)
+++ app/urls.py	(date 1590485808082)
@@ -30,7 +30,7 @@
 from app.view.user import profile,admin_check_user
 from .view.report import report
 from app.view.inspection import  inspect, receive
-from app.view.qa import  QaFileList
+from app.view.qa import  QaFileList, open_file_for_qa
 from app.view.validate import ValidateFileList
 
 from app.view.states_methods import update_state_batch,update_state_file,update_state_document
@@ -82,7 +82,7 @@
     path('view_docs_in_file/<str:file_reference>', DocumentTranscribe.as_view(), name='view_docs_in_file'),
     path('transcription_lab/<int:doc_id>/<str:file_type>',get_document_and_document_type, name='transcription_lab'),
     path('update_doc_content/<int:doc_id>', update_document_content, name='update_doc_content' ),
-    path('validate_doc_content/<int:doc_id>', validate_document_content, name='validate_doc_content'),
+    path('validate/doc/content/<int:doc_id>', validate_document_content, name='validate_doc_content'),
 
     path('file/document/storage/<str:file_reference>', get_files_from_storage, name='get_files_from_storage'),
     path('update/document/<int:document>',update_document_file_detail, name='update_document_file_detail'),
@@ -171,5 +171,7 @@
 
     path('file_details/<pk>',file_details, name='file_details'),
 
+    # open files for qa
+    path('file/qa/open/<int:id>', open_file_for_qa, name='open_qa_file'),
 ]
 
Index: edms/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for edms project.\r\n\r\nGenerated by 'django-admin startproject' using Django 3.0.4.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/3.0/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/3.0/ref/settings/\r\n\"\"\"\r\n\r\nimport os\r\n\r\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'rg$$9il&lqqfi57njx=9!*f_guufsmyz3v(1s1)t=bjr4zbv6d'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'app.apps.AppConfig',\r\n    'crispy_forms',\r\n    'django_jsonforms',\r\n    'django_tables2',\r\n    'django_filters',\r\n    'rest_framework',\r\n    'bootstrap4',\r\n    'django_fsm',\r\n]\r\nJSONFORMS_SCHEMA_DIR = '/static/'\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'edms.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [os.path.join(BASE_DIR, 'templates')]\r\n        ,\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'edms.wsgi.application'\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\r\nDOCKER = True\r\n\r\nif DOCKER:\r\n    DATABASES = {\r\n        'default': {\r\n            'ENGINE': 'django.db.backends.postgresql_psycopg2',\r\n            'NAME': 'postgres',\r\n            'USER': 'postgres',\r\n            'HOST': 'db',\r\n            'PORT': '5432',\r\n            'PASSWORD': 'password'\r\n\r\n        }\r\n\r\n    }\r\n\r\nelse:\r\n    DATABASES = {\r\n        'default': {\r\n            'ENGINE': 'django.db.backends.postgresql_psycopg2',\r\n            'NAME': 'work',\r\n            'USER': 'postgres',\r\n            'HOST': 'localhost',\r\n            'PORT': '5432',\r\n            'PASSWORD': 'password'\r\n        }\r\n    }\r\n\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_L10N = True\r\n\r\nUSE_TZ = True\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\r\nSTATIC_URL = '/static/'\r\nSTATIC_ROOT =  os.path.join(BASE_DIR, 'static')\r\nLOGIN_URL = 'login'\r\nMEDIA_URL = '/media/'\r\nLOGIN_REDIRECT_URL = 'profile'\r\nLOGOUT_REDIRECT_URL = 'login'\r\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- edms/settings.py	(revision d01bf0d93f4c20e314af8816ad3a4345fcddd69d)
+++ edms/settings.py	(date 1590425374646)
@@ -79,7 +79,7 @@
 
 # Database
 # https://docs.djangoproject.com/en/3.0/ref/settings/#databases
-DOCKER = True
+DOCKER = False
 
 if DOCKER:
     DATABASES = {
